// ------------------------------------------------------------
// KEY
// ** - Converted
// && - Converted, with note
// !! - New function, implemented
// -- - Skipped due to dubious Python Support - maybe revisit
// ^^ - Fully tested and implemented

// UTILITY
**int srcml_version_number();
**const char* srcml_version_string();
**int srcml_check_language(const char* language);
**const char* srcml_check_extension(const char* filename);
**size_t srcml_get_language_list_size();
&&const char* srcml_get_language_list(size_t pos); // NOTE: Changed to return a full Python list of all languages. A new function below has been created to preserve original function
!!get_language_from_list_pos(pos: int) // NOTE: Returns a language from the list at index pos. Took original functionality from above.
**int srcml_check_encoding(const char* encoding);
**int srcml_check_xslt();
**int srcml_check_exslt();
**const char* srcml_error_string();
**void srcml_memory_free(char * buffer);

// CONVENIENCE
**int srcml(const char* input_filename, const char* output_filename);
**int srcml_set_src_encoding(const char* encoding);
**int srcml_set_xml_encoding(const char* encoding);
**int srcml_set_language(const char* language);
**int srcml_set_filename(const char* filename);
**int srcml_set_url(const char* url);
**int srcml_set_version(const char* version);
**int srcml_set_timestamp(const char* timestamp);
**int srcml_set_options(size_t option);
**int srcml_enable_option(size_t option);
**int srcml_disable_option(size_t option);
**int srcml_set_tabstop(size_t tabstop);
**int srcml_register_file_extension(const char* extension, const char* language);
**int srcml_register_namespace(const char* prefix, const char* ns);
**int srcml_set_processing_instruction(const char* target, const char* data);
**int srcml_set_eol(size_t eol);
**int srcml_set_srcdiff_revision(size_t revision_number);
**const char* srcml_get_src_encoding();
**const char* srcml_get_xml_encoding();
**const char* srcml_get_revision();
**const char* srcml_get_language();
**const char* srcml_get_filename();
**const char* srcml_get_url();
**const char* srcml_get_version();
**const char* srcml_get_timestamp();
**const char* srcml_get_hash();
**int srcml_get_loc();
**size_t srcml_get_eol();
**int srcml_get_options();
**size_t srcml_get_tabstop();
**const char* srcml_get_processing_instruction_target();
**const char* srcml_get_processing_instruction_data();
**size_t srcml_get_namespace_size();
**const char* srcml_get_namespace_prefix(size_t pos);
**const char* srcml_get_prefix_from_uri(const char* namespace_uri);
**const char* srcml_get_namespace_uri(size_t pos);
**const char* srcml_get_uri_from_prefix(const char* prefix);
**void srcml_cleanup_globals();

// ARCHIVE 
&&struct srcml_archive* srcml_archive_create(); // NOTE: Turned into `__init__`
**struct srcml_archive* srcml_archive_clone(const struct srcml_archive* archive);
**int srcml_archive_error_number(const struct srcml_archive* archive);
**const char* srcml_archive_error_string(const struct srcml_archive* archive);
**int srcml_archive_write_unit(struct srcml_archive* archive, struct srcml_unit* unit);
**int srcml_archive_write_string(struct srcml_archive* archive, const char* s, int len);
**void srcml_archive_close(struct srcml_archive* archive);
// IDEA - Allow archives to work with `with` syntax
&&void srcml_archive_free(struct srcml_archive* archive); // NOTE: Turned into `__del__`
**int srcml_archive_write_open_filename(struct srcml_archive* archive, const char* srcml_filename);**
**int srcml_archive_write_open_memory(struct srcml_archive* archive, char** buffer, size_t * size);
!! write_open_file(self, file: File) // NEW: Uses srcml_archive_write_open_fd
--int srcml_archive_write_open_FILE(struct srcml_archive* archive, FILE* srcml_file);
--int srcml_archive_write_open_fd(struct srcml_archive* archive, int srcml_fd);
--int srcml_archive_write_open_io(struct srcml_archive* archive, void * context, int (*write_callback)(void * context, const char* buffer, int len), int (*close_callback)(void * context));
**int srcml_archive_read_open_filename(struct srcml_archive* archive, const char* srcml_filename);
**int srcml_archive_read_open_memory(struct srcml_archive* archive, const char* buffer, size_t buffer_size);
!!read_open_file(self, file: File) // NOTE - uses srcml_archive_read_open_fd, but takes a TextIOWrapper
--int srcml_archive_read_open_FILE(struct srcml_archive* archive, FILE* srcml_file);
--int srcml_archive_read_open_fd(struct srcml_archive* archive, int srcml_fd);
--int srcml_archive_read_open_io(struct srcml_archive* archive, void * context, int (*read_callback)(void * context, char* buffer, int len), int (*close_callback)(void * context));
**int srcml_archive_is_solitary_unit(const struct srcml_archive* archive);
**int srcml_archive_enable_solitary_unit(struct srcml_archive* archive);
**int srcml_archive_disable_solitary_unit(struct srcml_archive* archive);
**int srcml_archive_has_hash(const struct srcml_archive* archive);
**int srcml_archive_enable_hash(struct srcml_archive* archive);
**int srcml_archive_disable_hash(struct srcml_archive* archive);
**int srcml_archive_set_xml_encoding(struct srcml_archive* archive, const char* encoding);
**int srcml_archive_set_src_encoding(struct srcml_archive* archive, const char* encoding);
**int srcml_archive_set_language(struct srcml_archive* archive, const char* language);
**int srcml_archive_set_options(struct srcml_archive* archive, size_t option);
**int srcml_archive_enable_option(struct srcml_archive* archive, size_t option);
**int srcml_archive_disable_option(struct srcml_archive* archive, size_t option);
**int srcml_archive_set_tabstop(struct srcml_archive* archive, size_t tabstop);
**int srcml_archive_register_file_extension(struct srcml_archive* archive, const char* extension, const char* language);
**int srcml_archive_register_namespace(struct srcml_archive* archive, const char* prefix, const char* uri);
**int srcml_archive_set_processing_instruction(struct srcml_archive* archive, const char* target, const char* data);
**int srcml_archive_set_url(struct srcml_archive* archive, const char* url);
**int srcml_archive_set_version(struct srcml_archive* archive, const char* version);
**const char* srcml_archive_get_xml_encoding(const struct srcml_archive* archive);
**const char* srcml_archive_get_src_encoding(const struct srcml_archive* archive);
**const char* srcml_archive_get_revision(const struct srcml_archive* archive);
**const char* srcml_archive_get_language(const struct srcml_archive* archive);
**const char* srcml_archive_get_url(const struct srcml_archive* archive);
**const char* srcml_archive_get_version(const struct srcml_archive* archive);
**int srcml_archive_get_options(const struct srcml_archive* archive);
**size_t srcml_archive_get_tabstop(const struct srcml_archive* archive);
**size_t srcml_archive_get_namespace_size(const struct srcml_archive* archive);
**const char* srcml_archive_get_namespace_prefix(const struct srcml_archive* archive, size_t pos);
**const char* srcml_archive_get_prefix_from_uri(const struct srcml_archive* archive, const char* namespace_uri);
**const char* srcml_archive_get_namespace_uri(const struct srcml_archive* archive, size_t pos);
**const char* srcml_archive_get_uri_from_prefix(const struct srcml_archive* archive, const char* prefix);
**const char* srcml_archive_get_processing_instruction_target(const struct srcml_archive* archive);
**const char* srcml_archive_get_processing_instruction_data(const struct srcml_archive* archive);
**const char* srcml_archive_check_extension(const struct srcml_archive* archive, const char* filename);
--struct srcml_unit* srcml_archive_read_unit_header(struct srcml_archive* archive); // NOTE - cannot find an implementation in libsrcml
**struct srcml_unit* srcml_archive_read_unit(struct srcml_archive* archive);
!!read_units(self) -> list(srcMLUnit) // NEW - reads the remaining srcMLUnits in an archive and returns the list
**int srcml_archive_skip_unit(struct srcml_archive* archive);
// IDEA - Add generator to allow an archive to be looped through
**int srcml_append_transform_xpath(struct srcml_archive* archive, const char* xpath_string);
**int srcml_append_transform_xpath_attribute(struct srcml_archive* archive, const char* xpath_string, const char* prefix, const char* namespace_uri, const char* attr_name, const char* attr_value);
**int srcml_append_transform_xpath_element(struct srcml_archive* archive, const char* xpath_string, const char* prefix, const char* namespace_uri, const char* element);
**int srcml_append_transform_xslt_filename(struct srcml_archive* archive, const char* xslt_filename);
**int srcml_append_transform_xslt_memory(struct srcml_archive* archive, const char* xslt_buffer, size_t size);
--int srcml_append_transform_xslt_FILE(struct srcml_archive* archive, FILE* xslt_file);
--int srcml_append_transform_xslt_fd(struct srcml_archive* archive, int xslt_fd);
!!append_transform_xslt_file(self, xslt_file: File) // NOTE - uses srcml_append_transform_xslt_fd, but takes a TextIOWrapper
**int srcml_append_transform_relaxng_filename(struct srcml_archive* archive, const char* relaxng_filename);
**int srcml_append_transform_relaxng_memory(struct srcml_archive* archive, const char* relaxng_buffer, size_t size);
--int srcml_append_transform_relaxng_FILE(struct srcml_archive* archive, FILE* relaxng_file);
--int srcml_append_transform_relaxng_fd(struct srcml_archive* archive, int relaxng_fd);
!!append_transform_relaxng_file(self, relaxng_file: File) // NOTE - uses srcml_append_transform_relaxng_fd, but takes a TextIOWrapper
**int srcml_append_transform_param(struct srcml_archive* archive, const char* param_name, const char* param_value);
**int srcml_append_transform_stringparam(struct srcml_archive* archive, const char* param_name, const char* param_value);
!!__enter__(self) // NOTE - For python context manager
!!__exit__(self,exc_type,exc_val,exc_tb) // NOTE - For python context manager
!!__iter__(self): // NEW - for for looping

// TRANSFORM RESULT
&&int srcml_unit_apply_transforms(struct srcml_archive* archive, struct srcml_unit* unit, struct srcml_transform_result** result); // NOTE: Under ARCHIVE instead
**int srcml_transform_get_type(struct srcml_transform_result* result);
**int srcml_transform_get_unit_size(struct srcml_transform_result* result);
**struct srcml_unit* srcml_transform_get_unit(struct srcml_transform_result* result, int index);
**const char* srcml_transform_get_string(struct srcml_transform_result* result);
**double srcml_transform_get_number(struct srcml_transform_result* result);
**int srcml_transform_get_bool(struct srcml_transform_result* result);
&&int srcml_transform_free(struct srcml_transform_result* result); // NOTE: Turned into `__del__`
&&int srcml_clear_transforms(struct srcml_archive* archive); // NOTE: Under ARCHIVE instead
!!def get_units(self) -> list(srcMLUnit):
!!def __getitem__(self, i: int) -> srcMLUnit:
!!def is_unit_result(self) -> bool:
!!def is_string_result(self) -> bool:
!!def is_number_result(self) -> bool:
!!def is_bool_result(self) -> bool:
!!def get_value(self) -> list[srcMLUnit] | str | float | bool | None:
!!def __iter__(self)

// UNIT
!!__init__(self, unit_ptr) // NEW: Creates a srcml_unit from a C pointer value.
!!__str__(self) // NEW: Returns self.get_srcml
&&struct srcml_unit* srcml_unit_create(struct srcml_archive* archive); // NOTE: Under ARCHIVE instead
**struct srcml_unit* srcml_unit_clone(const struct srcml_unit* unit);
**int srcml_unit_error_number(const struct srcml_unit* unit);
**const char* srcml_unit_error_string(const struct srcml_unit* unit);
&&void srcml_unit_free(struct srcml_unit* unit); // NOTE: turned into `__del__`
**int srcml_unit_set_src_encoding(struct srcml_unit* unit, const char* encoding);
**int srcml_unit_set_language(struct srcml_unit* unit, const char* language);
**int srcml_unit_set_filename(struct srcml_unit* unit, const char* filename);
**int srcml_unit_set_version(struct srcml_unit* unit, const char* version);
**int srcml_unit_set_timestamp(struct srcml_unit* unit, const char* timestamp);
**int srcml_unit_set_eol(struct srcml_unit* unit, size_t eol);
**const char* srcml_unit_get_src_encoding(const struct srcml_unit* unit);
**const char* srcml_unit_get_revision(const struct srcml_unit* unit);
**const char* srcml_unit_get_language(const struct srcml_unit* unit);
**const char* srcml_unit_get_filename(const struct srcml_unit* unit);
**const char* srcml_unit_get_version(const struct srcml_unit* unit);
**const char* srcml_unit_get_timestamp(const struct srcml_unit* unit);
**const char* srcml_unit_get_hash(const struct srcml_unit* unit);
**int srcml_unit_get_loc(const struct srcml_unit* unit);
**size_t srcml_unit_get_eol(struct srcml_unit* unit);
**const char* srcml_unit_get_srcml(struct srcml_unit* unit);
**const char* srcml_unit_get_srcml_outer(struct srcml_unit* unit);
**const char* srcml_unit_get_srcml_inner(struct srcml_unit* unit);
**int srcml_unit_parse_filename(struct srcml_unit* unit, const char* src_filename);
**int srcml_unit_parse_memory(struct srcml_unit* unit, const char* src_buffer, size_t buffer_size);
--int srcml_unit_parse_FILE(struct srcml_unit* unit, FILE* src_file);
--int srcml_unit_parse_fd(struct srcml_unit* unit, int src_fd);
--int srcml_unit_parse_io(struct srcml_unit* unit, void * context, ssize_t (*read_callback)(void * context, void * buffer, size_t len), int (*close_callback)(void * context));
**int srcml_unit_unparse_filename(struct srcml_unit* unit, const char* src_filename);
**int srcml_unit_unparse_memory(struct srcml_unit* unit, char** src_buffer, size_t * src_size);
!!unparse_string(self) // NEW: Returns the unparsed unit as a string. Uses srcml_unit_unparse_memory
--int srcml_unit_unparse_FILE(struct srcml_unit* unit, FILE* file);
--int srcml_unit_unparse_fd(struct srcml_unit* unit, int fd);
--int srcml_unit_unparse_io(struct srcml_unit* unit, void * context, int (*write_callback)(void * context, const char* buffer, int len), int (*close_callback)(void * context));
**int srcml_write_start_unit(struct srcml_unit* unit);
**int srcml_write_end_unit(struct srcml_unit* unit);
**int srcml_write_start_element(struct srcml_unit* unit, const char* prefix, const char* name, const char* uri);
**int srcml_write_end_element(struct srcml_unit* unit);
**int srcml_write_namespace(struct srcml_unit* unit, const char* prefix, const char* uri);
**int srcml_write_attribute(struct srcml_unit* unit, const char* prefix, const char* name, const char* uri, const char* content);
**int srcml_write_string(struct srcml_unit* unit, const char* content);

// SRCDIFF - Eventually, move these out (after srcDiff is more standalone)
&&size_t srcml_get_srcdiff_revision(); // NOTE: Moved to CONVENIENCE
&&size_t srcml_archive_get_srcdiff_revision(const struct srcml_archive* archive); // NOTE: Moved to ARCHIVE
&&int srcml_archive_set_srcdiff_revision(struct srcml_archive* archive, size_t revision_number); // NOTE: Moved to ARCHIVE
