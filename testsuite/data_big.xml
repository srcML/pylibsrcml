<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="iTrace-Toolkit">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/basicalgorithm.cpp" hash="852fd0fd4c44ef3d3f5a7019b8bb68717f2e0b67"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file basicalgorithm.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"basicalgorithm.h"</cpp:file></cpp:include>

<constructor><name><name>BasicAlgorithm</name><operator>::</operator><name>BasicAlgorithm</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>gazes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_window_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_peak_threshold</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>FixationAlgorithm</name><argument_list>(<argument><expr><name>gazes</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
    <expr_stmt><expr><name>window_size</name> <operator>=</operator> <name>_window_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>radius</name> <operator>=</operator> <name>_radius</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>peak_threshold</name> <operator>=</operator> <name>_peak_threshold</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name></type> <name><name>BasicAlgorithm</name><operator>::</operator><name>generateFixations</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//This code follows the Olsson Algorithm</comment>

    <comment type="line">//Step 1 should already be done</comment>

    <comment type="line">//Step 2 - Calculate a vector of differences between each gaze</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>differences</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>window_size</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>session_gazes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>window_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>before</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>after</name> <init>=  <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>,<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>window_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>before</name><operator>.</operator><name>first</name></name> <operator>+=</operator> <name><name>session_gazes</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>before</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>session_gazes</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>after</name><operator>.</operator><name>first</name></name> <operator>+=</operator> <name><name>session_gazes</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>after</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>session_gazes</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>before</name><operator>.</operator><name>first</name></name> <operator>/=</operator> <name>window_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>before</name><operator>.</operator><name>second</name></name> <operator>/=</operator> <name>window_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>after</name><operator>.</operator><name>first</name></name> <operator>/=</operator> <name>window_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>after</name><operator>.</operator><name>second</name></name> <operator>/=</operator> <name>window_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>differences</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>before</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>before</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//Step 3-5 - Find the indicies of the Peaks</comment>
    <comment type="line">//step 3</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>peaks</name><argument_list>(<argument><expr><call><name><name>differences</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>differences</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt> </block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>differences</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>differences</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>differences</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>differences</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>differences</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>differences</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">//step 4</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>window_size</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>peaks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>i</name> <operator>-</operator> <operator>(</operator><name>window_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
            <decl><type ref="prev"/><name>end</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>start</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>peaks</name><index>[<expr><name>start</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>peaks</name><index>[<expr><name>end</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>peaks</name><index>[<expr><name>end</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>end</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>peaks</name><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>start</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
    <comment type="line">//step 5</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>indicies</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>peaks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>peak_threshold</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>indicies</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//Step 6? - Calculate the spaitial fixations through estimation</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>shortest_dis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//QVector&lt;Fixation&gt; fixations;</comment>

    <while>while<condition>(<expr><name>shortest_dis</name> <operator>&lt;</operator> <name>radius</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fixations</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start_peak_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>auto</name></type> <name>index</name> <range>: <expr><name>indicies</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>slice</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>start</name> <init>= <expr><call><name><name>session_gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>start_peak_index</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name><name>session_gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>index</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>back_inserter</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Fixation</name></type> <name>fix</name> <init>= <expr><call><name>computeFixationEstimate</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fixations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>start_peak_index</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>slice</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>session_gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>start_peak_index</name></expr></argument>, <argument><expr><call><name><name>session_gazes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>back_inserter</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Fixation</name></type> <name>fix</name> <init>= <expr><call><name>computeFixationEstimate</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fixations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>shortest_dis</name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Fixation</name><modifier>*</modifier></type> <name>previous_estimate</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>peak_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>peak_removal_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>crnt</name> <init>= <expr><call><name><name>fixations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init>;</init> <condition><expr><name>crnt</name> <operator>!=</operator> <call><name><name>fixations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>crnt</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>previous_estimate</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>distance</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>crnt</name><operator>)</operator><operator>.</operator><name>x</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>previous_estimate</name><operator>)</operator><operator>.</operator><name>x</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>pow</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>crnt</name><operator>)</operator><operator>.</operator><name>y</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>previous_estimate</name><operator>)</operator><operator>.</operator><name>y</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>shortest_dis</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>shortest_dis</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>peak_removal_index</name> <operator>=</operator> <name>peak_index</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>previous_estimate</name> <operator>=</operator> <operator>&amp;</operator><operator>*</operator><name>crnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>peak_removal_index</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name>shortest_dis</name> <operator>&lt;</operator> <name>radius</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>indicies</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>indicies</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>peak_removal_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>fixations</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Fixation</name></type> <name><name>BasicAlgorithm</name><operator>::</operator><name>computeFixationEstimate</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>fixation_gazes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Fixation</name></type> <name>fixation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>x_pos</name></decl>, <decl><type ref="prev"/><name>y_pos</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>gaze</name> <range>: <expr><name>fixation_gazes</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>x_pos</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>y_pos</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fixation</name><operator>.</operator><name>gaze_vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>gaze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>x_pos</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>x_pos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>y_pos</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>y_pos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>median_index</name> <init>= <expr><call><name><name>x_pos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>x_pos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>x_pos</name><index>[<expr><name>median_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>x_pos</name><index>[<expr><name>median_index</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>y_pos</name><index>[<expr><name>median_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>y_pos</name><index>[<expr><name>median_index</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>x_pos</name><index>[<expr><name>median_index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>y_pos</name><index>[<expr><name>median_index</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>fixation</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BasicAlgorithm</name><operator>::</operator><name>generateFixationSettings</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"BASIC,"</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>window_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>peak_threshold</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/basicalgorithm.h" hash="959478424c991a48411e76e38edb002ae1475509"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file basicalgorithm.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BASICALGORITHM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASICALGORITHM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixationalgorithm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BasicAlgorithm</name><range>: <expr><name>public</name> <name>FixationAlgorithm</name> <block>{
<expr><name>public</name><operator>:</operator>
    <macro><name>BasicAlgorithm</name><argument_list>(<argument>QVector&lt;Gaze&gt; gazes</argument>, <argument>int _window_size</argument>, <argument>int _radius</argument>, <argument>int _peak_threshold</argument>)</argument_list></macro></expr>;
    <expr><operator>~</operator><macro><name>BasicAlgorithm</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;


    <expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name> <macro><name>generateFixations</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

    <expr><name>QString</name> <macro><name>generateFixationSettings</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
    <name>Fixation</name> <macro><name>computeFixationEstimate</name><argument_list>(<argument>QVector&lt;Gaze&gt;</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>int</name> <name>window_size</name></expr>;
    <expr><name>int</name> <name>radius</name></expr>;
    <expr><name>int</name> <name>peak_threshold</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BASICALGORITHM_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/controller.cpp" hash="a95dbcd758451dad7c30b2e1ba399ee7f0d86bcf"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file controller.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"controller.h"</cpp:file></cpp:include>

<comment type="line" format="doxygen">/////////////////////////////////////////</comment>
<comment type="line">// HELPERS</comment>
<comment type="line" format="doxygen">/////////////////////////////////////////</comment>

<function type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <call><name><name>s</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>out</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>changeFilePathOS</name><parameter_list>(<parameter><decl><type><name>QString</name><modifier>&amp;</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_WIN</name></cpp:ifdef>
        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"file:///"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"file://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>findAllGazeLeadingElements</name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QDomElement</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>QDomNode</name></type> <name>crnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>res_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>res_col</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>cont</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>crnt</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>cont</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>QDomElement</name></type> <name>elem</name> <init>= <expr><call><name><name>crnt</name><operator>.</operator><name>toElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>elem</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>element_start_line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>element_start_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>element_end_line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>element_end_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>elem</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>elem</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>cont</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>start</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>start</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>start</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"INVALID_POS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>element_start_line</name> <operator>=</operator> <call><name><name>start</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>element_start_col</name> <operator>=</operator> <call><name><name>start</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>QString</name></type> <name>end</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name><name>end</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>end</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"INVALID_POS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>element_end_line</name> <operator>=</operator> <call><name><name>end</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>element_end_col</name> <operator>=</operator> <call><name><name>end</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//Check for bugs</comment>
            <if_stmt><if>if<condition>(<expr><name>element_end_line</name> <operator>&lt;</operator> <name>element_start_line</name> <operator>||</operator> <name>element_end_line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>element_start_line</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt> <comment type="line">// Skip this token</comment>

            <comment type="line">// Check if additional tags can encompass</comment>
            <if_stmt><if>if<condition>(<expr><name>element_start_line</name> <operator>&gt;</operator> <name>res_line</name> <operator>||</operator> <operator>(</operator><name>element_start_line</name> <operator>==</operator> <name>res_line</name> <operator>&amp;&amp;</operator> <name>element_start_col</name> <operator>&gt;</operator> <name>res_col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cont</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// No more can be found, stop all</comment>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name>res_line</name> <operator>&gt;</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>res_line</name> <operator>&gt;</operator> <name>element_end_line</name></expr>)</condition> <block>{<block_content>
                <return>return;</return> <comment type="line">// Skip this tag</comment>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name>res_line</name> <operator>&gt;=</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>res_line</name> <operator>&lt;</operator> <name>element_end_line</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>res_line</name> <operator>&gt;=</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>res_line</name> <operator>==</operator> <name>element_end_line</name> <operator>&amp;&amp;</operator> <name>res_col</name> <operator>&lt;=</operator> <name>element_end_col</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content> <return>return;</return> </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>QDomNode</name></type> <name>n</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>firstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><operator>!</operator><call><name><name>n</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>findAllGazeLeadingElements</name><argument_list>(<argument><expr><name>list</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>res_line</name></expr></argument>,<argument><expr><name>res_col</name></expr></argument>,<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><operator>!</operator><name>cont</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>nextSibling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>getFilenameFromXpath</name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>xpath</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>xpath</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></init></decl>,
        <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>xpath</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>filename</name> <init>= <expr><call><name><name>xpath</name><operator>.</operator><name>mid</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>,<argument><expr><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name><name>filename</name><operator>.</operator><name>mid</name></name><argument_list>(<argument><expr><call><name><name>filename</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>filename</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>filename</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">/////////////////////////////////////////</comment>
<comment type="line">// CLASS METHODS</comment>
<comment type="line" format="doxygen">/////////////////////////////////////////</comment>

<constructor><name><name>Controller</name><operator>::</operator><name>Controller</name></name><parameter_list>(<parameter><decl><type><name>QObject</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>saveDatabaseFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>closeDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>file_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>file</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>file_loc</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>is_open</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"#FF0000"</literal></expr></argument>,<argument><expr><literal type="string">"Failed to create database"</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"A problem was encountered when trying to create the file."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"Could not create database at "</literal> <operator>+</operator> <name>file_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>idb</name> <operator>=</operator> <call><name>Database</name><argument_list>(<argument><expr><name>file_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Successfully created new database "</literal> <operator>+</operator> <name>file_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><literal type="string">"Successfully created database"</literal></expr></argument>)</argument_list></call></expr>;</emit>
    <emit>emit <expr><call><name>databaseSet</name><argument_list>(<argument><expr><name>file_loc</name></expr></argument>)</argument_list></call></expr>;</emit>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>loadDatabaseFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>closeDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>idb</name> <operator>=</operator> <call><name>Database</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><call><name><name>idb</name><operator>.</operator><name>getSessions</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content> <emit>emit <expr><call><name>taskAdded</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</emit> </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Successfully loaded database "</literal> <operator>+</operator> <name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><literal type="string">"Successfully loaded database."</literal></expr></argument>)</argument_list></call></expr>;</emit>
    <emit>emit <expr><call><name>databaseSet</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</emit>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>closeDatabase</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Closed currently loaded database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <emit>emit <expr><call><name>databaseClosed</name><argument_list>()</argument_list></call></expr>;</emit>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>importXMLFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>isDatabaseOpen</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"Database not opened: Import XML"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Database Error"</literal></expr></argument>,<argument><expr><literal type="string">"There is no Database currently loaded."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//Exit function if file is already imported</comment>
    <if_stmt><if>if<condition>(<expr><call><name><name>idb</name><operator>.</operator><name>fileExists</name></name><argument_list>(<argument><expr><call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>file_path</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"XML file already imported "</literal><operator>+</operator><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"XML Import Error"</literal></expr></argument>,<argument><expr><literal type="string">"This XML File has already been imported into the Database."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>XMLHandler</name></type> <name>xml_file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>type</name> <init>= <expr><call><name><name>xml_file</name><operator>.</operator><name>getXMLFileType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="string">"itrace_core"</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>importCoreXML</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="string">"itrace_plugin"</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>importPluginXML</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"WARNING"</literal></expr></argument>,<argument><expr><literal type="string">"Unrecognized iTrace XML file "</literal><operator>+</operator><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"#F55904"</literal></expr></argument>,<argument><expr><literal type="string">"Unrecognized iTrace XML file: "</literal><operator>+</operator><name>file_path</name></expr></argument>)</argument_list></call></expr>;</emit>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>importDatabaseFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Importing DB : "</literal> <operator>&lt;&lt;</operator> <name>file_path</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>importExistingDatabase</name></name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><call><name><name>idb</name><operator>.</operator><name>getSessions</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content> <emit>emit <expr><call><name>taskAdded</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</emit> </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Successfully imported database "</literal> <operator>+</operator> <name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><literal type="string">"Successfully imported database."</literal></expr></argument>)</argument_list></call></expr>;</emit>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>batchAddXML</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>folder_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Scanning and adding all XML files in: "</literal><operator>+</operator><name>folder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>isDatabaseOpen</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"Database not opened: Batch add XML files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Database Error"</literal></expr></argument>,<argument><expr><literal type="string">"There is no Database currently loaded."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <emit>emit <expr><call><name>setProgressBarToIndeterminate</name><argument_list>()</argument_list></call></expr>;</emit>

    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>folder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QDirIterator</name></type> <name>counter</name><argument_list>(<argument><expr><name>folder_path</name></expr></argument>, <argument><expr><name><name>QDir</name><operator>::</operator><name>Files</name></name></expr></argument>, <argument><expr><name><name>QDirIterator</name><operator>::</operator><name>Subdirectories</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><call><name><name>counter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>counter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
            <emit>emit <expr><call><name>stopProgressBar</name><argument_list>()</argument_list></call></expr>;</emit>
            <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"File Search Too Large"</literal></expr></argument>,<argument><expr><literal type="string">"The selected folder contained too many sub items."</literal></expr></argument>)</argument_list></call></expr>;</emit>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>


    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>files</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QDirIterator</name></type> <name>dir</name><argument_list>(<argument><expr><name>folder_path</name></expr></argument>, <argument><expr><call><name>QStringList</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"*.xml"</literal></expr></argument>, <argument><expr><name><name>QDir</name><operator>::</operator><name>Files</name></name></expr></argument>, <argument><expr><name><name>QDirIterator</name><operator>::</operator><name>Subdirectories</name></name></expr></argument>)</argument_list></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
    <while>while<condition>(<expr><call><name><name>dir</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>filename</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//if(filename.endsWith(".xml")) {</comment>
        <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XMLHandler</name></type> <name>xml_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>type</name> <init>= <expr><call><name><name>xml_file</name><operator>.</operator><name>getXMLFileType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="string">"itrace_core"</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="string">"itrace_plugin"</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>QString</name></type> <name>id</name> <init>= <expr><call><name><name>xml_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"session_id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name><name>files</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>auto</name></type> <name>insert</name> <init>= <expr><call><name><name>files</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>insert</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content> <expr_stmt><expr><operator>(</operator><call><name><name>files</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><call><name><name>second</name><operator>.</operator><name>first</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="string">"itrace_core"</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">//}</comment>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>QString</name></type> <name>badPairWarn</name></decl>, <decl><type ref="prev"/><name>alreadyInWarn</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name><name>files</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>files</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>i</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name></name></expr>)</condition> <block>{<block_content>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name><name>i</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>fileExists</name></name><argument_list>(<argument><expr><call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>j</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>importXMLFile</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
                <else>else <block>{<block_content> <expr_stmt><expr><name>alreadyInWarn</name> <operator>+=</operator> <literal type="string">"\t"</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else <block>{<block_content> <for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name> <range>: <expr><name><name>i</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name></name></expr></range></decl></init>)</control> <block>{<block_content> <expr_stmt><expr><name>badPairWarn</name> <operator>+=</operator> <literal type="string">"\t"</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt> </block_content>}</block></for> </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <emit>emit <expr><call><name>stopProgressBar</name><argument_list>()</argument_list></call></expr>;</emit>

    <decl_stmt><decl><type><name>QString</name></type> <name>warn</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>badPairWarn</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>warn</name> <operator>+=</operator> <literal type="string">"The following files were missing their associated pair file:\n"</literal> <operator>+</operator> <name>badPairWarn</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>alreadyInWarn</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>warn</name> <operator>+=</operator> <literal type="string">"The following files are already imported:\n"</literal> <operator>+</operator> <name>alreadyInWarn</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>warn</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"Batch XML Import Errors: "</literal><operator>+</operator><name>warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"XML Import Error"</literal></expr></argument>,<argument><expr><name>warn</name></expr></argument>)</argument_list></call></expr>;</emit>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>importCoreXML</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>isDatabaseOpen</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"Database not opened: Core File import"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Database Error"</literal></expr></argument>,<argument><expr><literal type="string">"There is no Database currently loaded."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//log-&gt;writeLine("INFO","Importing iTrace Core file: "+file_path);</comment>

    <decl_stmt><decl><type><name>QElapsedTimer</name></type> <name>time</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>XMLHandler</name></type> <name>core_file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>startTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>session_id</name></decl>,
            <decl><type ref="prev"/><name>participant_id</name></decl>,
            <decl><type ref="prev"/><name>task_name</name></decl>,
            <decl><type ref="prev"/><name>session_date_time</name></decl>,
            <decl><type ref="prev"/><name>calibration_id</name> <init>= <expr><literal type="string">"-1"</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>calibration_x</name></decl>,
            <decl><type ref="prev"/><name>calibration_y</name></decl>,
            <decl><type ref="prev"/><name>calibration_point_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>skipCalibration</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>!</operator><call><name><name>core_file</name><operator>.</operator><name>isAtEnd</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>element</name> <init>= <expr><call><name><name>core_file</name><operator>.</operator><name>getNextElementName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"itrace_core"</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>session_id</name> <operator>=</operator> <call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"session_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>participant_id</name> <operator>=</operator> <call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"participant_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>task_name</name> <operator>=</operator> <call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"task_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>session_date_time</name> <operator>=</operator> <call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"session_date_time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Insert participant only if it doesn't already exist</comment>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>participantExists</name></name><argument_list>(<argument><expr><name>participant_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertParticipant</name></name><argument_list>(<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// The null may change in the future</comment>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Insert file</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertFile</name></name><argument_list>(<argument><expr><call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"core"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"environment"</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Insert session</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertSession</name></name><argument_list>(<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"screen_width"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"screen_height"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"tracker_type"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"tracker_serial_number"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>session_date_time</name></expr></argument>,<argument><expr><name>session_date_time</name></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"screen_recording_start"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>task_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"calibration"</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>calibration_id</name> <operator>=</operator> <call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>calibrationExists</name></name><argument_list>(<argument><expr><name>calibration_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Insert calibration</comment>
                <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertCalibration</name></name><argument_list>(<argument><expr><name>calibration_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>skipCalibration</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content> <expr_stmt><expr><name>skipCalibration</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"calibration_point"</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>skipCalibration</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Ternary operators convert "0" to "0.0" for better formating and consistent hashing</comment>
            <expr_stmt><expr><name>calibration_x</name> <operator>=</operator> <ternary><condition><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"0"</literal></expr> ?</condition><then> <expr><literal type="string">"0.0"</literal></expr> </then><else>: <expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>calibration_y</name> <operator>=</operator> <ternary><condition><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"0"</literal></expr> ?</condition><then> <expr><literal type="string">"0.0"</literal></expr> </then><else>: <expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>calibration_point_id</name> <operator>=</operator> <call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><operator>(</operator><name>calibration_id</name><operator>+</operator><name>calibration_x</name><operator>+</operator><name>calibration_y</name><operator>)</operator><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Insert calibration_point</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertCalibrationPoint</name></name><argument_list>(<argument><expr><name>calibration_point_id</name></expr></argument>,<argument><expr><name>calibration_id</name></expr></argument>,<argument><expr><name>calibration_x</name></expr></argument>,<argument><expr><name>calibration_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"sample"</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>skipCalibration</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Insert calibration_sample</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertCalibrationSample</name></name><argument_list>(<argument><expr><name>calibration_point_id</name></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_validity"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_validity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"response"</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Insert gaze</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertGaze</name></name><argument_list>(<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"event_id"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>calibration_id</name></expr></argument>,<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"tracker_time"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"core_time"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_pupil_diameter"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"left_validation"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_pupil_diameter"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"right_validation"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"user_left_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"user_left_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"user_left_z"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"user_right_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"user_right_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>core_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"user_right_z"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*QString report = idb.checkAndReturnError();
        if(report != "") {
            log-&gt;writeLine("WARNING","The followng SQLite Error occured while handling core file: "+report);
        }*/</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>report</name> <init>= <expr><call><name><name>core_file</name><operator>.</operator><name>checkAndReturnError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>report</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"WARNING"</literal></expr></argument>,<argument><expr><literal type="string">"The following XML Error occured while handling core file: "</literal><operator>+</operator><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Core file successfully imported "</literal><operator>+</operator><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <emit>emit <expr><call><name>taskAdded</name><argument_list>(<argument><expr><name>participant_id</name> <operator>+</operator> <literal type="string">" - "</literal> <operator>+</operator> <name>task_name</name></expr></argument>)</argument_list></call></expr>;</emit>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Core file imported. Took %1 seconds"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>time</name><operator>.</operator><name>elapsed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>importPluginXML</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>isDatabaseOpen</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>,<argument><expr><literal type="string">"Database not opened: Plugin File import"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Database Error"</literal></expr></argument>,<argument><expr><literal type="string">"There is no Database currently loaded."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>QElapsedTimer</name></type> <name>time</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>XMLHandler</name></type> <name>plugin_file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>startTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>session_id</name></decl>,
            <decl><type ref="prev"/><name>ide_plugin_type</name></decl>;</decl_stmt>

    <comment type="line">// Used for checking for duplicate data</comment>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>all_ids</name></decl>;</decl_stmt><comment type="line">// = idb.getAllIDEContextIDs();</comment>

    <while>while<condition>(<expr><operator>!</operator><call><name><name>plugin_file</name><operator>.</operator><name>isAtEnd</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>element</name> <init>= <expr><call><name><name>plugin_file</name><operator>.</operator><name>getNextElementName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//std::cout &lt;&lt; element &lt;&lt; std::endl;</comment>

        <if_stmt><if>if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"itrace_plugin"</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>session_id</name> <operator>=</operator> <call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"session_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"environment"</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>types</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>types</name><index>[<expr><literal type="string">"msvs"</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"vstudio_plugin"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>types</name><index>[<expr><literal type="string">"eclipse"</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"eclipse_plugin"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>types</name><index>[<expr><literal type="string">"atom"</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"atom_plugin"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>types</name><index>[<expr><literal type="string">"chrome"</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"chrome_plugin"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ide_plugin_type</name> <operator>=</operator> <call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"plugin_type"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLower</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Insert file</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertFile</name></name><argument_list>(<argument><expr><call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>types</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>ide_plugin_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>element</name> <operator>==</operator> <literal type="string">"response"</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Insert ide_context</comment>

            <comment type="line">// Check if we are inserting duplicate data</comment>
            <comment type="line">//if(idb.pluginResponseExists(plugin_file.getElementAttribute(("event_id")))) {</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>all_ids</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"event_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>QString</name></type> <name>output</name> <init>= <expr><literal type="string">"Duplicate Plugin Context data in file: "</literal><operator>+</operator><name>file_path</name><operator>+</operator><literal type="string">" with event_id: "</literal> <operator>+</operator> <call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event_id"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"#F55904"</literal></expr></argument>,<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</emit>
                <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"#F55904"</literal></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"event_id"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
                <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"WARNING"</literal></expr></argument>,<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// The last 4 parameters are unused for the moment</comment>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertIDEContext</name></name><argument_list>(<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"event_id"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"plugin_time"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ide_plugin_type</name></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"gaze_target"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"gaze_target_type"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"source_file_path"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"source_file_line"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"source_file_col"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"editor_line_height"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"editor_font_height"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"editor_line_base_x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"editor_line_base_y"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>all_ids</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>plugin_file</name><operator>.</operator><name>getElementAttribute</name></name><argument_list>(<argument><expr><literal type="string">"event_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*QString report = idb.checkAndReturnError();
        if(report != "") {
            log-&gt;writeLine("WARNING","The followng SQLite Error occured while handling plugin file: "+report);
        }*/</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>report</name> <init>= <expr><call><name><name>plugin_file</name><operator>.</operator><name>checkAndReturnError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>report</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"WARNING"</literal></expr></argument>,<argument><expr><literal type="string">"The following XML Error occured while handling plugin file: "</literal><operator>+</operator><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Plugin file successfully imported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Plugin file imported. Took %1 seconds"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>time</name><operator>.</operator><name>elapsed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>generateFixationData</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>tasks</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>algSettings</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>log</name><operator>-&gt;</operator><name>writeLine</name></name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Generating fixations with settings: "</literal><operator>+</operator><name>algSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QElapsedTimer</name></type> <name>time</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>sessions</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>tasks</name></expr></range></decl></init>)</control> <block>{<block_content> <comment type="line">// Get the sessions that the user wants to use</comment>
        <decl_stmt><decl><type><name>QStringList</name></type> <name>values</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"1"</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sessions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>idb</name><operator>.</operator><name>getSessionFromParticipantAndTask</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name> <operator>+=</operator> <call><name><name>idb</name><operator>.</operator><name>getGazeTargetsFromSession</name></name><argument_list>(<argument><expr><call><name><name>sessions</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <emit>emit <expr><call><name>startProgressBar</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</emit>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>startTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>session_id</name> <range>: <expr><name>sessions</name></expr></range></decl></init>)</control> <block>{<block_content>
        <comment type="line">//std::cout &lt;&lt; "?" &lt;&lt; std::endl;</comment>
        <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name></type> <name>session_fixations</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>gaze_targets</name> <init>= <expr><call><name><name>idb</name><operator>.</operator><name>getGazeTargetsFromSession</name></name><argument_list>(<argument><expr><name>session_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>fixation_filter_settings</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>gaze_target</name> <range>: <expr><name>gaze_targets</name></expr></range></decl></init>)</control> <block>{<block_content>
            <comment type="line">//emit outputToScreen("black","Generating fixations for gaze_target: "+gaze_target);</comment>
            <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>gazes</name> <init>= <expr><call><name><name>idb</name><operator>.</operator><name>getGazesFromSessionAndTarget</name></name><argument_list>(<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>gaze_target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name><name>gazes</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>FixationAlgorithm</name><modifier>*</modifier></type> <name>algorithm</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QStringList</name></type> <name>settings</name> <init>= <expr><call><name><name>algSettings</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>settings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"BASIC"</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">//BASIC-4-35-40 = BASIC-window_size-radius-peak</comment>
                <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <operator>new</operator> <call><name>BasicAlgorithm</name><argument_list>(<argument><expr><name>gazes</name></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>window_size</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>radius</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>peak</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>settings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"IDT"</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">//IDT-10-125 = IDT-duration_window-dispersion</comment>
                <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <operator>new</operator> <call><name>IDTAlgorithm</name><argument_list>(<argument><expr><name>gazes</name></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>duration_window</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>dispersion</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>settings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"IVT"</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">//IVT-50-80 = IVT-velocity-duration</comment>
                <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <operator>new</operator> <call><name>IVTAlgorithm</name><argument_list>(<argument><expr><name>gazes</name></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>velocity</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>settings</name><index>[<expr><name>duration</name></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content> <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Algorithm Error"</literal></expr></argument>,<argument><expr><literal type="string">"An invalid algorithm type was supplied: "</literal> <operator>+</operator> <name><name>settings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</emit> <return>return;</return> </block_content>}</block></else></if_stmt> <comment type="line">// Error handler</comment>
            <expr_stmt><expr><call><name><name>session_fixations</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>algorithm</name><operator>-&gt;</operator><name>generateFixations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fixation_filter_settings</name> <operator>=</operator> <call><name><name>algorithm</name><operator>-&gt;</operator><name>generateFixationSettings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <emit>emit <expr><call><name>setProgressBarValue</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</emit> <expr_stmt><expr><operator>++</operator><name>counter</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>delete</operator> <name>algorithm</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>item</name> <init>= <expr><call><name><name>session_fixations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>item</name> <operator>!=</operator> <call><name><name>session_fixations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>item</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>item</name><operator>-&gt;</operator><name>calculateDatabaseFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>session_fixations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>session_fixations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fixation</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Fixation</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> -&gt; <type><name>bool</name></type> <block>{<block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>fixation_event_time</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>fixation_event_time</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name></type> <name>ms</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>fixation_run_id</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>ms</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>fixation_date_time</name> <init>= <expr><name>fixation_run_id</name></expr></init></decl>;</decl_stmt> <comment type="line">// This will probably be changed in the future</comment>
        <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertFixationRun</name></name><argument_list>(<argument><expr><name>fixation_run_id</name></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>fixation_date_time</name></expr></argument>,<argument><expr><name>fixation_filter_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>fixation_order</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>fix</name> <init>= <expr><call><name><name>session_fixations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>fix</name> <operator>!=</operator> <call><name><name>session_fixations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>fix</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>QString</name></type> <name>fixation_id</name> <init>= <expr><call><name><name>QUuid</name><operator>::</operator><name>createUuid</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fixation_id</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>fixation_id</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertFixation</name></name><argument_list>(<argument><expr><name>fixation_id</name></expr></argument>,<argument><expr><name>fixation_run_id</name></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>fixation_event_time</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>fixation_order</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>source_file_line</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>source_file_col</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><ternary><condition><expr><name><name>fix</name><operator>-&gt;</operator><name>token</name></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name><name>fix</name><operator>-&gt;</operator><name>token</name></name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name><name>fix</name><operator>-&gt;</operator><name>syntactic_category</name></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name><name>fix</name><operator>-&gt;</operator><name>syntactic_category</name></name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name><name>fix</name><operator>-&gt;</operator><name>xpath</name></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name><name>fix</name><operator>-&gt;</operator><name>xpath</name></name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>left_pupil_diameter</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>right_pupil_diameter</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>fix</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt><expr><operator>++</operator><name>fixation_order</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>unique_gazes</name></decl>;</decl_stmt> <comment type="line">// What does this even do? Check the py</comment>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>gaze</name> <range>: <expr><name><name>fix</name><operator>-&gt;</operator><name>gaze_vec</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><call><name><name>unique_gazes</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>event_time</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>unique_gazes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertFixationGaze</name></name><argument_list>(<argument><expr><name>fixation_id</name></expr></argument>,<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>event_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <emit>emit <expr><call><name>stopProgressBar</name><argument_list>()</argument_list></call></expr>;</emit>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Fixation data generated. Elapsed time: %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>time</name><operator>.</operator><name>elapsed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>mapTokens</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>srcml_file_path</name></decl></parameter>, <parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>tasks</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>overwrite</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QElapsedTimer</name></type> <name>timer</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>sessions</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>tasks</name></expr></range></decl></init>)</control> <block>{<block_content> <comment type="line">// Get the sessions that the user wants to use</comment>
        <decl_stmt><decl><type><name>QStringList</name></type> <name>values</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"1"</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sessions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>idb</name><operator>.</operator><name>getSessionFromParticipantAndTask</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>srcml_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRCMLHandler</name></type> <name>srcml</name><argument_list>(<argument><expr><name>srcml_file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>srcml</name><operator>.</operator><name>isPositional</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"srcML Error"</literal></expr></argument>,<argument><expr><literal type="string">"The provided srcML File does not contain positional data. Tokens will not be mapped without it. Re-generate the srcML Archive file with the --position flag"</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add srcML Archive to Files table</comment>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>idb</name><operator>.</operator><name>fileExists</name></name><argument_list>(<argument><expr><call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>srcml</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>insertFile</name></name><argument_list>(<argument><expr><call><name><name>QCryptographicHash</name><operator>::</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>srcml</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>QCryptographicHash</name><operator>::</operator><name>Sha1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toHex</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"null"</literal></expr></argument>,<argument><expr><call><name><name>srcml</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"srcml_archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>all_files</name> <init>= <expr><call><name><name>srcml</name><operator>.</operator><name>getAllFilenames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>startTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>files_viewed</name> <init>= <expr><call><name><name>idb</name><operator>.</operator><name>getFilesViewed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <emit>emit <expr><call><name>startProgressBar</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>files_viewed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
    <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><literal type="string">"Mapping tokens for "</literal><operator>+</operator><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>files_viewed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">" gaze targets."</literal></expr></argument>)</argument_list></call></expr>;</emit>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><literal type="string">"This could take a while. Please wait."</literal></expr></argument>)</argument_list></call></expr>;</emit>

    <decl_stmt><decl><type><name>QString</name></type> <name>warn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRCMLMapper</name></type> <name>mapper</name><argument_list>(<argument><expr><name>idb</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>file</name> <init>= <expr><call><name><name>files_viewed</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>file</name> <operator>!=</operator> <call><name><name>files_viewed</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>file</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>QElapsedTimer</name></type> <name>inner_timer</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inner_timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>file</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>file</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>QString</name></type> <name>unit_path</name> <init>= <expr><call><name>findMatchingPath</name><argument_list>(<argument><expr><name>all_files</name></expr></argument>,<argument><expr><name><name>file</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>unit_path</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>warn</name> <operator>+=</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
                <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"#F55904"</literal></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Target %1 skipped - no valid unit."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
                <emit>emit <expr><call><name>setProgressBarValue</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</emit> <expr_stmt><expr><operator>++</operator><name>counter</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>mapSyntax</name></name><argument_list>(<argument><expr><name>srcml</name></expr></argument>,<argument><expr><name>unit_path</name></expr></argument>,<argument><expr><name><name>file</name><operator>-&gt;</operator><name>second</name></name></expr></argument>,<argument><expr><name>overwrite</name></expr></argument>,<argument><expr><name>sessions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>mapToken</name></name><argument_list>(<argument><expr><name>srcml</name></expr></argument>,<argument><expr><name>unit_path</name></expr></argument>,<argument><expr><name><name>file</name><operator>-&gt;</operator><name>second</name></name></expr></argument>,<argument><expr><name>overwrite</name></expr></argument>,<argument><expr><name>sessions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1 / %2 Targets Mapped. Time elasped: %3"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>files_viewed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>inner_timer</name><operator>.</operator><name>elapsed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
        <emit>emit <expr><call><name>setProgressBarValue</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</emit> <expr_stmt><expr><operator>++</operator><name>counter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <emit>emit <expr><call><name>stopProgressBar</name><argument_list>()</argument_list></call></expr>;</emit>
    <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Token Mapping done. Time elasped: %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>timer</name><operator>.</operator><name>elapsed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</emit>
    <if_stmt><if>if<condition>(<expr><name>warn</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>warn</name> <operator>=</operator> <literal type="string">"The following gaze targets had no matching unit:"</literal> <operator>+</operator> <name>warn</name></expr>;</expr_stmt>
        <emit>emit <expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Token Mapping Error"</literal></expr></argument>,<argument><expr><name>warn</name></expr></argument>)</argument_list></call></expr>;</emit>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>beep</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// This should probably be a helper function</comment>
<function><type><name>QString</name></type> <name><name>Controller</name><operator>::</operator><name>findMatchingPath</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>all_files</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>,<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>toLower</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QStringList</name></expr></argument>&gt;</argument_list></name></type> <name>possible</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>file_split</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>check</name> <init>= <expr><name><name>file_split</name><index>[<expr><call><name><name>file_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>all_files</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>i</name><operator>.</operator><name>toLower</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>possible</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><call><name><name>possible</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name><name>possible</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>possible</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>shortest</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>passes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


    <while>while<condition>(<expr><call><name><name>possible</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QStringList</name></expr></argument>&gt;</argument_list></name></type> <name>candidates</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>passes</name> <operator>&gt;</operator> <call><name><name>file_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><name>shortest</name></expr>;</return> </block_content>}</block></if></if_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>unit_path</name> <range>: <expr><name>possible</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>passes</name> <operator>&gt;</operator> <call><name><name>unit_path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>shortest</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>shortest</name> <operator>=</operator> <call><name><name>unit_path</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>QString</name></type> <name>unit_check</name> <init>= <expr><name><name>unit_path</name><index>[<expr><call><name><name>unit_path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>passes</name></expr>]</index></name><operator>.</operator><call><name>toLower</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QString</name></type> <name>file_check</name> <init>= <expr><name><name>file_split</name><index>[<expr><call><name><name>file_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>passes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>unit_check</name> <operator>==</operator> <name>file_check</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>unit_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>possible</name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>passes</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>(<expr><call><name><name>possible</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>possible</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>highlightFixations</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>srcml_file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/*if(!idb.isDatabaseOpen()) {
        emit warning("Database Error","There is no Database currently loaded.");
        return;
    }

    QElapsedTimer timer;
    timer.start();

    emit outputToScreen("black","Highlighting Fixations...");
    QVector&lt;QString&gt; ids = idb.getFixationRunIDs();
    for(auto id : ids) {
        emit outputToScreen("black","Fixation Run: " + id);
        highlightTokens(idb.getFixationsFromRunID(id),SRCMLHandler(srcml_file_path),dir,id);
    }
    emit outputToScreen("black",QString("Done Highlighting! Time elapsed: %1").arg(timer.elapsed() / 1000.0));*/</comment>
</block_content>}</block></function>

<comment type="line">// WIP</comment>
<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>highlightTokens</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>fixations</name></decl></parameter>, <parameter><decl><type><name>SRCMLHandler</name></type> <name>srcml</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>run_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/*//xpath -&gt; [source_file_line,source_file_col,token]
    //mkdir((dir+"/"+run_id).toUtf8().constData());

    std::map&lt;QString,QVector&lt;QVector&lt;QString&gt;&gt;&gt; token_map;
    for(auto fixation : fixations) {
        QString unit_xpath = fixation[0].left(fixation[0].indexOf("]")) + "]";
        QVector&lt;QString&gt; extra = { fixation[1],fixation[2],fixation[3] };
        //token_map.insert(std::make_pair(unit_xpath,extra));
        if(token_map.count(unit_xpath) == 0) {
            token_map.insert(std::make_pair(unit_xpath,QVector&lt;QVector&lt;QString&gt;&gt;()));
        }
        token_map.find(unit_xpath)-&gt;second.push_back(extra);
        std::cout &lt;&lt; "("; for(auto i : extra) { std::cout &lt;&lt; i &lt;&lt; ","; } std::cout &lt;&lt; ")" &lt;&lt; std::endl;
    }
    for(auto unit : token_map) {
        std::sort(unit.second.begin(), unit.second.end(), [](const QVector&lt;QString&gt;&amp; a,const QVector&lt;QString&gt;&amp; b) -&gt; bool { return a[0].toInt() &lt; b[0].toInt() &amp;&amp; a[1].toInt() &lt; b[1].toInt(); });
        generateHighlightedFile(dir,getFilenameFromXpath(unit.first),srcml.getUnitText(unit.first).split("\n"),unit.second);
    }
    // TODO - Need to add the run_prettify.js file
    // Currently don't know how to have that work
    // with how C++ creates executables

    //emit outputToScreen("Finished Exporting Files");*/</comment>

</block_content>}</block></function>

<comment type="line">// TODO - NOT YET DONE</comment>
<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>generateHighlightedFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>QStringList</name></type> <name>source_contents</name></decl></parameter>, <parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>locations</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/*emit outputToScreen("Processing: " + filename);

    std::set&lt;QString&gt; set_keys;
    // This is a sin against man
    // Fix this later \/
    std::map&lt;int,QVector&lt;std::pair&lt;std::pair&lt;int,int&gt;,QString&gt;&gt;&gt; boundary_matches;
    
    for(auto location : locations) {
        int line_num = location[0].toInt() - 1,
            col_num = location[1].toInt() - 1;
        QString token = location[2],
                source_line = source_contents[line_num];
        std::cout &lt;&lt; "SOURCE LINE: " &lt;&lt; source_line &lt;&lt; std::endl;
        QString set_key = token + "L" + QString::number(line_num) + "C" + QString::number(col_num);

        if(set_keys.count(set_key) &gt; 0) { continue; }
        else { set_keys.insert(set_key); }
        
        bool bounds_hit = false;
        if(boundary_matches.count(line_num) &gt; 0) {
            for(auto matches : boundary_matches.at(line_num)) {
                bounds_hit = col_num &gt;= matches.first.first &amp;&amp; matches.first.second &amp;&amp; matches.second == token;
                if(bounds_hit) { break; }
            }
        }
        else { boundary_matches.insert(std::make_pair(line_num,QVector&lt;std::pair&lt;std::pair&lt;int,int&gt;,QString&gt;&gt;())); }
        
        if(bounds_hit) { continue; }
        
        if(token.size() == 1) {
            int token_index = source_line.indexOf(token,col_num);
            source_line = source_line.left(token_index) + "&lt;MARK&gt;" + token + "&lt;/MARK&gt;" + source_line.right(source_line.size() - token_index - 1);
            boundary_matches.at(line_num).push_back(std::make_pair(std::make_pair(token_index,token_index),token));
        }
        else {
            int start_index = source_line.indexOf(token),
                end_index = start_index + token.size() - 1;
            while(!(col_num &gt;= start_index &amp;&amp; col_num &lt;= end_index)) {
                start_index = source_line.indexOf(token,start_index+1);
                end_index = start_index + token.size() - 1;
            }
            boundary_matches.at(line_num).push_back(std::make_pair(std::make_pair(start_index,end_index),token));
            source_line = source_line.left(start_index) + "&lt;MARK&gt;" + token +  "&lt;/MARK&gt;" + source_line.right(source_line.size() - end_index);
        }
        source_contents[line_num] = source_line;
    }
    QString output = dir + filename.left(filename.lastIndexOf(".")) + "-" + QString::number(std::time(nullptr))+".html";
    //std::ifstream highlighted_file(output.toUtf8().constData());
    QFile highlighted_file(output);
    highlighted_file.open(QIODevice::WriteOnly | QIODevice::Text);
    QTextStream highlighted_file_stream(&amp;highlighted_file);
    highlighted_file_stream &lt;&lt; "&lt;HTML&gt;&lt;HEAD&gt;&lt;SCRIPT src=\"run_prettify.js\"&gt;&lt;/SCRIPT&gt;&lt;TITLE&gt;" &lt;&lt; filename
                            &lt;&lt; "&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\n&lt;PRE&gt;&lt;CODE class=\"prettyprint\"&gt;\n";
    for(auto line_of_code : source_contents) {
        line_of_code.replace("&lt;","&amp;lt;");
        line_of_code.replace("&gt;","&amp;gt;");
        line_of_code.replace("&amp;lt;MARK&amp;gt;","&lt;MARK&gt;");
        line_of_code.replace("&amp;lt;/MARK&amp;gt;","&lt;/MARK&gt;");
        highlighted_file_stream &lt;&lt; line_of_code;
    }
    highlighted_file_stream &lt;&lt; "&lt;/CODE&gt;&lt;/PRE&gt;\n&lt;/BODY&gt;&lt;/HTML&gt;\n";
    */</comment>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>Controller</name><operator>::</operator><name>generateQuery</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>targets</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>token_types</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>duration_min</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>duration_max</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_line_min</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_line_max</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_col_min</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_col_max</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_pupil_diameter_min</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_pupil_diameter_max</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_pupil_diameter_min</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_pupil_diameter_max</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><literal type="string">"SELECT * FROM fixation WHERE "</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add in Targets</comment>
    <if_stmt><if>if<condition>(<expr><name>targets</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QStringList</name></type> <name>target_list</name> <init>= <expr><call><name><name>targets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>query</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"fixation_target = \"%1\""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>target_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name><name>target_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>target_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>query</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" OR fixation_target = \"%1\" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">" AND "</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Add in Tokens</comment>
    <if_stmt><if>if<condition>(<expr><name>token_types</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QStringList</name></type> <name>token_list</name> <init>= <expr><call><name><name>token_types</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>query</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"(fixation_target = \"%1\""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>token_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name><name>token_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>token_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>query</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" OR token = \"%1\" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">") AND "</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Duration</comment>
    <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">" duration &gt;= "</literal> <operator>+</operator> <name>duration_min</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>duration_max</name><operator>.</operator><name>toInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"AND duration &lt;= "</literal><operator>+</operator><name>duration_max</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <comment type="line">// Source File Line #</comment>
    <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">" AND source_file_line &gt;= "</literal> <operator>+</operator> <name>source_file_line_min</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>source_file_line_max</name><operator>.</operator><name>toInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"AND source_file_line &lt;= "</literal><operator>+</operator><name>source_file_line_max</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <comment type="line">// Source File Column #</comment>
    <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">" AND source_file_col &gt;= "</literal> <operator>+</operator> <name>source_file_col_min</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>source_file_col_max</name><operator>.</operator><name>toInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"AND source_file_col &lt;= "</literal><operator>+</operator><name>source_file_col_max</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


    <comment type="line">// Left and Right Pupil Diameters</comment>
    <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">" AND left_pupil_diameter &gt;= "</literal> <operator>+</operator> <name>left_pupil_diameter_min</name> <operator>+</operator> <literal type="string">" AND left_pupil_diameter &lt;= "</literal> <operator>+</operator> <name>left_pupil_diameter_max</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>query</name> <operator>+=</operator> <literal type="string">" AND right_pupil_diameter &gt;= "</literal> <operator>+</operator> <name>right_pupil_diameter_min</name> <operator>+</operator> <literal type="string">" AND right_pupil_diameter &lt;= "</literal> <operator>+</operator> <name>right_pupil_diameter_max</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"QUERY: "</literal> <operator>&lt;&lt;</operator> <name>query</name> <operator>&lt;&lt;</operator> <literal type="string">"||\n"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><name>query</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>loadQueryFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>output_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>output_url</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QIODevice</name><operator>::</operator><name>ReadOnly</name></name> <operator>|</operator> <name><name>QIODevice</name><operator>::</operator><name>Text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <emit>emit <expr><call><name>outputToScreen</name><argument_list>(<argument><expr><literal type="string">"red"</literal></expr></argument>,<argument><expr><literal type="string">"No file matching the given path was found."</literal></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>QTextStream</name></type> <name>stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>data</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>readAll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>generateQueriedData</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name>output_type</name></expr></argument>,<argument><expr><name>output_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>saveQueryFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>file_path</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>file</name> <operator>&lt;&lt;</operator> <name>query</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Controller</name><operator>::</operator><name>generateQueriedData</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>output_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>output_url</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name><name>idb</name><operator>.</operator><name>runFilterQuery</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>safeQuery</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>savename</name> <init>= <expr><name>output_url</name><operator>+</operator><literal type="string">"/fixation_query_"</literal><operator>+</operator><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>time</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><name>output_type</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>changeFilePathOS</name><argument_list>(<argument><expr><name>savename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>savename</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <comment type="line" format="doxygen">/////// DATABASE</comment>
    <if_stmt><if>if<condition>(<expr><name>output_type</name> <operator>==</operator> <literal type="string">".db3"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QSqlDatabase</name></type> <name>output</name> <init>= <expr><call><name><name>QSqlDatabase</name><operator>::</operator><name>addDatabase</name></name><argument_list>(<argument><expr><literal type="string">"QSQLITE"</literal></expr></argument>,<argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>setDatabaseName</name></name><argument_list>(<argument><expr><name>savename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS fixation(fixation_id TEXT PRIMARY KEY,fixation_run_id INTEGER,fixation_start_event_time INTEGER,fixation_order_number INTEGER,x INTEGER,y INTEGER,fixation_target TEXT,source_file_line INTEGER, source_file_col INTEGER,token TEXT,syntactic_category TEXT,xpath TEXT,left_pupil_diameter REAL,right_pupil_diameter REAL,duration INTEGER, query TEXT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO fixation(fixation_id,fixation_run_id,fixation_start_event_time,fixation_order_number,x,y,fixation_target,source_file_line,source_file_col,token,syntactic_category,xpath,left_pupil_diameter,right_pupil_diameter,duration,query) VALUES(\"%1\",%2,%3,%4,%5,%6,\"%7\",%8,%9,%10,%11,%12,%13,%14,%15,\"%16\")"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>i</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"null"</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name><name>i</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>i</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"null"</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name><name>i</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>i</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>==</operator> <literal type="string">"null"</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name><name>i</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>safeQuery</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>,<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QSqlDatabase</name><operator>::</operator><name>removeDatabase</name></name><argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line" format="doxygen">/////// TAB SEPARATED VALUES</comment>
    <if type="elseif">else if<condition>(<expr><name>output_type</name> <operator>==</operator> <literal type="string">".tsv"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>output</name><argument_list>(<argument><expr><call><name><name>savename</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"fixation_id\tfixation_run_id\tfixation_start_event_time\tfixation_order_number\tx\ty\tfixation_target\tsource_file_line\tsource_file_col\ttoken\tsyntactic_category\txpath\tleft_pupil_diameter\tright_pupil_diameter\tduration\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>fix</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control> <block>{<block_content> <for>for<control>(<init><decl><type><name>auto</name></type> <name>value</name> <range>: <expr><name>fix</name></expr></range></decl></init>)</control> <block>{<block_content> <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <call><name><name>value</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt> </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line" format="doxygen">/////// XML</comment>
    <if type="elseif">else if<condition>(<expr><name>output_type</name> <operator>==</operator> <literal type="string">".xml"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>output</name><argument_list>(<argument><expr><call><name><name>savename</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;itrace_fixation_query query=\""</literal> <operator>&lt;&lt;</operator> <name>safeQuery</name> <operator>&lt;&lt;</operator> <literal type="string">"\"&gt;\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>fix</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"\t"</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;fixation fixation_id=\"%1\" fixation_run_id=\"%2\" fixation_start_event_time=\"%3\" fixation_order_number=\"%4\" x=\"%5\" y=\"%6\" fixation_target=\"%7\" source_file_line=\"%8\" source_file_col=\"%9\" token=\"%10\" syntactic_category=\"%11\" xpath=\"%12\" left_pupil_diameter=\"%13\" right_pupil_diameter=\"%14\" duration=\"%15\" /&gt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;/itrace_fixation_query&gt;"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line" format="doxygen">/////// JSON</comment>
    <if type="elseif">else if<condition>(<expr><name>output_type</name> <operator>==</operator> <literal type="string">".json"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>output</name><argument_list>(<argument><expr><call><name><name>savename</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"{\n\t\"query\": \""</literal> <operator>&lt;&lt;</operator> <name>safeQuery</name> <operator>&lt;&lt;</operator> <literal type="string">"\",\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"\t\"fixations\": [\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>fix</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"\t{\n\t\t\"fixation_id\": \"%1\",\n\t\t\"fixation_run_id\": \"%2\",\n\t\t\"fixation_start_event_time\": %3,\n\t\t\"fixation_order_number\": %4,\n\t\t\"x\": %5,\n\t\t\"y\": %6,\n\t\t\"fixation_target\": \"%7\",\n\t\t\"source_file_line\": %8,\n\t\t\"source_file_col\": %9,\n\t\t\"token\": \"%10\",\n\t\t\"syntactic_category\": \"%11\",\n\t\t\"xpath\": \"%12\",\n\t\t\"left_pupil_diameter\": %13,\n\t\t\"right_pupil_diameter\": %14,\n\t\t\"duration\": %15\n\t}\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>fix</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="string">"\t]\n}"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>output_type</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/controller.h" hash="273eb087c54c8893bed81f98de7da015cee943a0"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file controller.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CONTROLLER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTROLLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qqml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCryptographicHash&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QUuid&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QElapsedTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDirIterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDomDocument&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmlhandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gaze.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"basicalgorithm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idtalgorithm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivtalgorithm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srcmlhandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srcmlmapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logger.h"</cpp:file></cpp:include>

<comment type="line">// Algorithm settings enums</comment>
<enum>enum <name>basic</name> <block>{
    <decl><name>window_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>radius</name></decl>,
    <decl><name>peak</name></decl>
}</block>;</enum>

<enum>enum <name>idt</name> <block>{
    <decl><name>duration_window</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>dispersion</name></decl>
}</block>;</enum>

<enum>enum <name>ivt</name> <block>{
    <decl><name>velocity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>duration</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>Controller</name> <range>: <expr><name>public</name> <name>QObject</name> <block>{
<expr><name>public</name><operator>:</operator>
    <name>Q_OBJECT</name>

    <name>QML_ELEMENT</name>
<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>Controller</name><argument_list>(<argument><expr><name>QObject</name><operator>*</operator> <name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//XML Functions</comment>
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>saveDatabaseFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>loadDatabaseFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>closeDatabase</name><argument_list>()</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>importXMLFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>importDatabaseFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>batchAddXML</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>importCoreXML</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>importPluginXML</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//Fixation Functions</comment>
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>generateFixationData</name><argument_list>(<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//srcML Functions</comment>
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>mapTokens</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>QString</name> <call><name>findMatchingPath</name><argument_list>(<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//Highlight Functions</comment>
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>highlightFixations</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>highlightTokens</name><argument_list>(<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>SRCMLHandler</name></expr></argument>, <argument><expr><name>QString</name></expr></argument>, <argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>generateHighlightedFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QStringList</name></expr></argument>,<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//Query Functions</comment>
    <expr><name>Q_INVOKABLE</name> <name>QString</name> <call><name>generateQuery</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>loadQueryFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>saveQueryFile</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Q_INVOKABLE</name> <name>void</name> <call><name>generateQueriedData</name><argument_list>(<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;


<expr><name>signals</name><operator>:</operator>
    <name>void</name> <call><name>taskAdded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>task</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>outputToScreen</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>color</name></expr></argument>,<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>msg</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>warning</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>title</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>msg</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>databaseSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>databaseClosed</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>startProgressBar</name><argument_list>(<argument>int start</argument>,<argument>int stop</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>stopProgressBar</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>setProgressBarValue</name><argument_list>(<argument>int val</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>setProgressBarToIndeterminate</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>Database</name> <name>idb</name></expr>;
    <expr><name>Logger</name><operator>*</operator> <name>log</name> <operator>=</operator> <name>Logger</name><operator>::</operator><call><name>instance</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// CONTROLLER_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/database.cpp" hash="c4e38f0d59831669d5e17c2bb44c7cce82e28669"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file database.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database.h"</cpp:file></cpp:include>

<constructor><name><name>Database</name><operator>::</operator><name>Database</name></name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></constructor>

<constructor><name><name>Database</name><operator>::</operator><name>Database</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>Database</name><argument_list>()</argument_list></call> </member_init_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>sqlite3_open</name><argument_list>(<argument><expr><call><name><name>file_path</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>open</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>error</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>pragma_query</name> <init>=
            <expr><literal type="string">"pragma journal_mode = WAL;"</literal>
            <literal type="string">"pragma synchronous = off;"</literal>
            <literal type="string">"pragma temp_store = memory;"</literal>
            <literal type="string">"pragma mmap_size = 30000000000;"</literal></expr></init></decl>
            ;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>table_query</name> <init>=
            <expr><literal type="string">"CREATE TABLE IF NOT EXISTS participant(participant_id TEXT PRIMARY KEY,session_length INTEGER);"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS fixation_run(fixation_run_id INTEGER PRIMARY KEY,session_id INTEGER,date_time INTEGER,filter TEXT,FOREIGN KEY (session_id) REFERENCES session(session_id));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS session(session_id INTEGER PRIMARY KEY,participant_id TEXT,screen_width INTEGER, screen_height INTEGER,tracker_type TEXT, tracker_serial_number TEXT,session_date INTEGER, session_time INTEGER,screen_recording_start INTEGER,task_name TEXT,FOREIGN KEY (participant_id) REFERENCES participant(participant_id));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS fixation(fixation_id TEXT PRIMARY KEY,fixation_run_id INTEGER,fixation_start_event_time INTEGER,fixation_order_number INTEGER,x INTEGER,y INTEGER,fixation_target TEXT,source_file_line INTEGER, source_file_col INTEGER,token TEXT,syntactic_category TEXT,xpath TEXT,left_pupil_diameter REAL,right_pupil_diameter REAL,duration INTEGER);"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS calibration(calibration_id INTEGER PRIMARY KEY);"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS calibration_point(calibration_point_id TEXT,calibration_id INTEGER,calibration_x REAL,calibration_y REAL,FOREIGN KEY (calibration_id) REFERENCES calibration(calibration_id));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS calibration_sample(calibration_point_id TEXT,left_x REAL, left_y REAL,left_validation REAL,right_x REAL, right_y REAL,right_validation REAL,FOREIGN KEY (calibration_point_id) REFERENCES calibration_point(calibration_point_id));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS gaze(event_time INTEGER PRIMARY KEY,session_id INTEGER,calibration_id INTEGER,participant_id TEXT, tracker_time INTEGER, system_time INTEGER, x REAL, y REAL,left_x REAL, left_y REAL, left_pupil_diameter REAL, left_validation INTEGER,right_x REAL, right_y REAL, right_pupil_diameter REAL, right_validation INTEGER,user_left_x REAL,user_left_y REAL,user_left_z REAL,user_right_x REAL,user_right_y REAL,user_right_z REAL,FOREIGN KEY (session_id) REFERENCES session(session_id),FOREIGN KEY (calibration_id) REFERENCES calibration(calibration_id),FOREIGN KEY (participant_id) REFERENCES participant(participant_id));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS ide_context(event_time INTEGER,session_id INTEGER,time_stamp TEXT,ide_type TEXT,gaze_target TEXT,gaze_target_type TEXT,source_file_path TEXT, source_file_line INTEGER, source_file_col INTEGER,editor_line_height REAL,editor_font_height REAL, editor_line_base_x REAL, editor_line_base_y REAL,source_token TEXT,source_token_type TEXT, source_token_xpath TEXT, source_token_syntactic_context TEXT, x REAL, y REAL,FOREIGN KEY (event_time) REFERENCES gaze(event_time),FOREIGN KEY (session_id) REFERENCES session(session_id));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS web_context(event_time INTEGER,browser_type TEXT,site_name TEXT,url TEXT,tag TEXT,FOREIGN KEY (event_time) REFERENCES gaze(event_time));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS fixation_gaze(fixation_id INTEGER,event_time INTEGER,FOREIGN KEY (fixation_id) REFERENCES fixation(fixation_id),FOREIGN KEY (event_time) REFERENCES gaze(event_time));"</literal>
            <literal type="string">"CREATE TABLE IF NOT EXISTS files(file_hash TEXT PRIMARY KEY,session_id INTEGER,file_full_path TEXT,file_type TEXT,FOREIGN KEY (session_id) REFERENCES session(session_id));"</literal>

            <literal type="string">"CREATE INDEX idx_event_time ON ide_context(event_time);"</literal></expr></init></decl>
            ;</decl_stmt>


    <comment type="line">//sqlite3_exec(db, pragma_query.toStdString().c_str(), NULL, 0, NULL);</comment>

    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>table_query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>close</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>open</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>open</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Database</name><operator>::</operator><name>isDatabaseOpen</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>open</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getTableNamesCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>table_names</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>table_names</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>importExistingDatabase</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>startTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>errmsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>attach_query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"ATTACH '%1' AS importing_db"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>attach_query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>errmsg</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>


    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>table_names</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>table_names_query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT name FROM sqlite_schema WHERE type='table'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>table_names_query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>getTableNamesCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>table_names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>errmsg</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>raw_import_insert_query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT OR IGNORE INTO %1 SELECT * FROM importing_db.%2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>table_name</name> <range>: <expr><name>table_names</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>raw_import_insert_query</name><operator>.</operator><name>arg</name></name><argument_list>(<argument><expr><name>table_name</name></expr></argument>,<argument><expr><name>table_name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>errmsg</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>detach_query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"DETACH importing_db"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>detach_query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>errmsg</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>exists_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>count</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Database</name><operator>::</operator><name>fileExists</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>file_hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT file_hash FROM files WHERE file_hash = \"%1\";"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>file_hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exists_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Database</name><operator>::</operator><name>participantExists</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>participant_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT participant_id FROM participant WHERE participant_id = \"%1\";"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>participant_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exists_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Database</name><operator>::</operator><name>calibrationExists</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>calibration_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT calibration_id FROM calibration WHERE calibration_id = %1;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>calibration_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exists_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Database</name><operator>::</operator><name>pluginResponseExists</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>response_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) FROM ide_context WHERE event_time = %1;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>response_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exists_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>startTransaction</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//db.exec("BEGIN");</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>commit</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//db.exec("COMMIT");</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertCalibration</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>calibration_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO calibration(calibration_id) VALUES(%1);"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>calibration_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertCalibrationPoint</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>calibration_point_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>calibration_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>calibration_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>calibration_y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO calibration_point(calibration_point_id,calibration_id,calibration_x,calibration_y) VALUES(\"%1\",%2,%3,%4);"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>calibration_point_id</name></expr></argument>,<argument><expr><name>calibration_id</name></expr></argument>,<argument><expr><name>calibration_x</name></expr></argument>,<argument><expr><name>calibration_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertCalibrationSample</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>calibration_point_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_validation</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_validation</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO calibration_sample(calibration_point_id,left_x,left_y,left_validation,right_x,right_y,right_validation) VALUES(\"%1\",%2,%3,%4,%5,%6,%7)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>calibration_point_id</name></expr></argument>,<argument><expr><name>left_x</name></expr></argument>,<argument><expr><name>left_y</name></expr></argument>,<argument><expr><name>left_validation</name></expr></argument>,<argument><expr><name>right_x</name></expr></argument>,<argument><expr><name>right_y</name></expr></argument>,<argument><expr><name>right_validation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertFile</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_hash</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>file_full_path</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>file_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO files(file_hash,session_id,file_full_path,file_type) VALUES(\"%1\",%2,\"%3\",\"%4\");"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>file_hash</name></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>file_full_path</name></expr></argument>,<argument><expr><name>file_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertFixation</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>fixation_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>fixation_run_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>fixation_start_event_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>fixation_order_number</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>fixation_target</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_line</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_col</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>syntactic_category</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>xpath</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_pupil_diameter</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_pupil_diameter</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO fixation(fixation_id,fixation_run_id,fixation_start_event_time,fixation_order_number,x,y,fixation_target,source_file_line,source_file_col,token,syntactic_category,xpath,left_pupil_diameter,right_pupil_diameter,duration) VALUES(\"%1\",%2,%3,%4,%5,%6,\"%7\",%8,%9,%10,%11,%12,%13,%14,%15);"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>fixation_id</name></expr></argument>,<argument><expr><name>fixation_run_id</name></expr></argument>,<argument><expr><name>fixation_start_event_time</name></expr></argument>,<argument><expr><name>fixation_order_number</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>fixation_target</name></expr></argument>,<argument><expr><name>source_file_line</name></expr></argument>,<argument><expr><name>source_file_col</name></expr></argument>,<argument><expr><ternary><condition><expr><name>token</name> <operator>==</operator> <literal type="string">"null"</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>token</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>syntactic_category</name> <operator>==</operator> <literal type="string">"null"</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>syntactic_category</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>xpath</name> <operator>==</operator> <literal type="string">"null"</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>xpath</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><name>left_pupil_diameter</name></expr></argument>,<argument><expr><name>right_pupil_diameter</name></expr></argument>,<argument><expr><name>duration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>,<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertFixationGaze</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>fixation_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>event_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO fixation_gaze(fixation_id,event_time) VALUES(\"%1\",%2);"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>fixation_id</name></expr></argument>,<argument><expr><name>event_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertFixationRun</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>fixation_run_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>date_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO fixation_run(fixation_run_id,session_id,date_time,filter) VALUES(%1,%2,%3,\"%4\");"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>fixation_run_id</name></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>date_time</name></expr></argument>,<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertGaze</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>calibration_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>participant_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>tracker_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>system_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_pupil_diameter</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>left_validation</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_pupil_diameter</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>right_validation</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>user_left_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>user_left_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>user_left_z</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>user_right_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>user_right_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>user_right_z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO gaze(event_time,session_id,calibration_id,participant_id,tracker_time,system_time,x,y,left_x,left_y,left_pupil_diameter,left_validation,right_x,right_y,right_pupil_diameter,right_validation,user_left_x,user_left_y,user_left_z,user_right_x,user_right_y,user_right_z) VALUES(%1,%2,%3,\"%4\",\"%5\",\"%6\",\"%7\",\"%8\",\"%9\",\"%10\",\"%11\",\"%12\",\"%13\",\"%14\",\"%15\",\"%16\",\"%17\",\"%18\",\"%19\",\"%20\",\"%21\",\"%22\");"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>event_time</name></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>calibration_id</name></expr></argument>,<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><name>tracker_time</name></expr></argument>,<argument><expr><name>system_time</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>left_x</name></expr></argument>,<argument><expr><name>left_y</name></expr></argument>,<argument><expr><name>left_pupil_diameter</name></expr></argument>,<argument><expr><name>left_validation</name></expr></argument>,<argument><expr><name>right_x</name></expr></argument>,<argument><expr><name>right_y</name></expr></argument>,<argument><expr><name>right_pupil_diameter</name></expr></argument>,<argument><expr><name>right_validation</name></expr></argument>,<argument><expr><name>user_left_x</name></expr></argument>,<argument><expr><name>user_left_y</name></expr></argument>,<argument><expr><name>user_left_z</name></expr></argument>,<argument><expr><name>user_right_x</name></expr></argument>,<argument><expr><name>user_right_y</name></expr></argument>,<argument><expr><name>user_right_z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// The following parameters are unused here and should always be inserted as ""</comment>
<comment type="line">// source_token, source_token_type, source_token_xpath, source_token_sytnactic_context</comment>
<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertIDEContext</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>time_stamp</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>ide_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>gaze_target</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>gaze_target_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_path</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_line</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_file_col</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>editor_line_height</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>editor_font_height</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>editor_line_base_x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>editor_line_base_y</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_token</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_token_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_token_xpath</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>source_token_syntactic_context</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO ide_context(event_time,session_id,time_stamp,ide_type,gaze_target,gaze_target_type,source_file_path,source_file_line,source_file_col,editor_line_height,editor_font_height,editor_line_base_x,editor_line_base_y,source_token,source_token_type,source_token_xpath,source_token_syntactic_context,x,y) VALUES(%1,%2,\"%3\",\"%4\",\"%5\",\"%6\",\"%7\",%8,%9,%10,%11,%12,%13,%14,%15,%16,%17,%18,%19);"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>event_time</name></expr></argument>,<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>time_stamp</name></expr></argument>,<argument><expr><name>ide_type</name></expr></argument>,<argument><expr><name>gaze_target</name></expr></argument>,<argument><expr><name>gaze_target_type</name></expr></argument>,<argument><expr><name>source_file_path</name></expr></argument>,<argument><expr><name>source_file_line</name></expr></argument>,<argument><expr><name>source_file_col</name></expr></argument>,<argument><expr><ternary><condition><expr><name>editor_line_height</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name>editor_line_height</name></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>editor_font_height</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name>editor_font_height</name></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>editor_line_base_x</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name>editor_line_base_x</name></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>editor_line_base_y</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name>editor_line_base_y</name></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>source_token</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>source_token</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>source_token_type</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>source_token_type</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>source_token_xpath</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>source_token_xpath</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><ternary><condition><expr><name>source_token_syntactic_context</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>source_token_syntactic_context</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertParticipant</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>participant_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO participant(participant_id,session_length) VALUES(\"%1\",%2);"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><name>session_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertSession</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>participant_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>screen_width</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>screen_height</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>tracker_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>tracker_serial_number</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_date</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>session_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>screen_recording_start</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>task_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO session(session_id,participant_id,screen_width,screen_height,tracker_type,tracker_serial_number,session_date,session_time,screen_recording_start,task_name) VALUES(%1,\"%2\",%3,%4,\"%5\",\"%6\",%7,%8,%9,\"%10\");"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><name>screen_width</name></expr></argument>,<argument><expr><name>screen_height</name></expr></argument>,<argument><expr><name>tracker_type</name></expr></argument>,<argument><expr><name>tracker_serial_number</name></expr></argument>,<argument><expr><name>session_date</name></expr></argument>,<argument><expr><name>session_time</name></expr></argument>,<argument><expr><name>screen_recording_start</name></expr></argument>,<argument><expr><name>task_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Currently unused</comment>
<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>insertWebContext</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_time</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>browser_type</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>site_name</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO web_context(event_time,browser_type,site_name,url,tag) VALUES(%1,\"%2\",\"%3\",\"%4\",\"%5\");"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>event_time</name></expr></argument>,<argument><expr><name>browser_type</name></expr></argument>,<argument><expr><name>site_name</name></expr></argument>,<argument><expr><name>url</name></expr></argument>,<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getSessionsCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sessions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>sessions</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getSessions</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT participant_id, task_name FROM session;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getSessionsCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getAllIDEContextIDsCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>ids</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getAllIDEContextIDs</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT event_time FROM ide_context;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getAllIDEContextIDsCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getGazesForSyntacticMappingCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gazes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>gazes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>hold</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name><name>hold</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>hold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getGazesForSyntacticMapping</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>overwrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT event_time,session_id,source_file_line,source_file_col,source_token_syntactic_context FROM ide_context WHERE source_file_path = \"%1\" AND source_file_line &gt;= 0 AND source_file_line IS NOT NULL AND source_file_col &gt;= 0 AND source_file_col IS NOT NULL"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>overwrite</name></expr> ?</condition><then> <expr><literal type="string">" AND source_token_syntactic_context IS NULL "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"ORDER BY source_file_line ASC, source_file_col ASC;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getGazesForSyntacticMappingCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getGazesForSourceMappingCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gazes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>gazes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>hold</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name><name>hold</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>hold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getGazesForSourceMapping</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>file_path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>overwrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT event_time,session_id,source_file_line,source_file_col,source_token_syntactic_context FROM ide_context WHERE source_file_path = \"%1\" AND source_file_line &gt;= 0 AND source_file_line IS NOT NULL AND source_file_col &gt;= 0 AND source_file_col IS NOT NULL"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>overwrite</name></expr> ?</condition><then> <expr><literal type="string">" AND source_token_syntactic_context IS NOT NULL AND source_token IS NULL "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"ORDER BY source_file_line ASC, source_file_col ASC;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getGazesForSourceMappingCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getGazeTargetsFromSessionCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gaze_targets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>gaze_targets</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getGazeTargetsFromSession</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT DISTINCT ide_context.gaze_target FROM ide_context WHERE ide_context.gaze_target != \"\";"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>gaze_targets</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getGazeTargetsFromSessionCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gaze_targets</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>gaze_targets</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getGazesFromSessionAndTargetCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gazes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>gazes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Gaze</name></type> <name>data</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>data</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>x</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Gaze</name><argument_list>(<argument><expr><call><name><name>x</name><operator>-&gt;</operator><name>last</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Gaze</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getGazesFromSessionAndTarget</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>session_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>gaze_target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>gazes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT gaze.event_time, gaze.x, gaze.y, gaze.system_time, gaze.left_pupil_diameter, gaze.right_pupil_diameter, gaze.left_validation, gaze.right_validation, ide_context.gaze_target, ide_context.gaze_target_type, ide_context.source_file_line, ide_context.source_file_col, ide_context.source_token, ide_context.source_token_xpath, ide_context.source_token_syntactic_context FROM gaze JOIN ide_context ON gaze.event_time=ide_context.event_time WHERE gaze.session_id = %1 AND ide_context.gaze_target = \"%2\" ORDER BY gaze.event_time ASC;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>session_id</name></expr></argument>,<argument><expr><name>gaze_target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getGazesFromSessionAndTargetCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gazes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>gazes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getFilesViewedCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>files_viewed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>files_viewed</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>, <argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>getFilesViewed</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT DISTINCT gaze_target, source_file_path FROM ide_context WHERE gaze_target is not \"\";"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>files_viewed</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getFilesViewedCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>files_viewed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>files_viewed</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>getSessionFromParticipantAndTaskCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name>QString</name><operator>*</operator><operator>)</operator><name>id</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>QString</name></type> <name><name>Database</name><operator>::</operator><name>getSessionFromParticipantAndTask</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>participant_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>task_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"SELECT session_id FROM session WHERE participant_id = \"%1\" AND task_name = \"%2\";"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>participant_id</name></expr></argument>,<argument><expr><name>task_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getSessionFromParticipantAndTaskCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>updateGazeWithSyntacticInfo</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>xpath</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>syntactic_context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xpath</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>,<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"UPDATE ide_context SET source_token_xpath = \"%1\", source_token_syntactic_context = \"%2\" WHERE event_time = %3;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>,<argument><expr><name>syntactic_context</name></expr></argument>,<argument><expr><name>event_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//std::cout &lt;&lt; "rc: " &lt;&lt; rc &lt;&lt; std::endl;</comment>
    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"updateGazeWithSyntacticInfo"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Error: "</literal> <operator>&lt;&lt;</operator> <call><name>QString</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>updateGazeWithTokenInfo</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>token_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>query</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"UPDATE ide_context SET source_token = '%1',source_token_type = %2 WHERE event_time = %3;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>,<argument><expr><literal type="string">"''"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><ternary><condition><expr><name>token_type</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>token_type</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><name>event_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"updateGazeWithTokenInfo"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Error: "</literal> <operator>&lt;&lt;</operator> <call><name>QString</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>Database</name><operator>::</operator><name>queryUpdateGazeWithSyntacticInfo</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>xpath</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>syntactic_context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"UPDATE ide_context SET source_token_xpath = \"%1\", source_token_syntactic_context = \"%2\" WHERE event_time = %3;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>,<argument><expr><name>syntactic_context</name></expr></argument>,<argument><expr><name>event_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>Database</name><operator>::</operator><name>queryUpdateGazeWithTokenInfo</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>event_id</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>token_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"UPDATE ide_context SET source_token = '%1',source_token_type = %2 WHERE event_time = %3;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>,<argument><expr><literal type="string">"''"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><ternary><condition><expr><name>token_type</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal><operator>+</operator><name>token_type</name><operator>+</operator><literal type="string">"\""</literal></expr></else></ternary></expr></argument>,<argument><expr><name>event_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>runFilterQueryCALLBACK</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fixs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>azColName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>*</operator><operator>)</operator><name>fixs</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>hold</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name><name>hold</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>hold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>Database</name><operator>::</operator><name>runFilterQuery</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>fixations</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>runFilterQueryCALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fixations</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fixations</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Database</name><operator>::</operator><name>executeLongUpdateQuery</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>big_query</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><call><name><name>big_query</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// TODO - Need to port these from QSqlDatabase to sqlite3 C Library</comment>

<comment type="block">/*

QString Database::checkAndReturnError() {
    return db.lastError().text();
}


QVector&lt;QString&gt; Database::getFixationRunIDs() {
    QVector&lt;QString&gt; ids;
    QSqlQuery data = db.exec("SELECT DISTINCT fixation_run_id FROM fixation");
    while(data.next()) {
        ids.push_back(data.value(0).toString());
    }
    return ids;
}

QVector&lt;QVector&lt;QString&gt; &gt; Database::getFixationsFromRunID(QString run_id) {
    QVector&lt;QVector&lt;QString&gt;&gt; fixations;
    QSqlQuery data = db.exec(QString("SELECT DISTINCT xpath, source_file_line, source_file_col, token FROM fixation WHERE fixation_run_id = %1 AND syntactic_category != '' AND token != 'WHITESPACE' ORDER BY source_file_line ASC, source_file_col ASC").arg(run_id));
    while(data.next()) {
        QVector&lt;QString&gt; hold;
        for(int i = 0; i &lt; 4; ++i) { hold.push_back(data.value(i).toString()); }
        fixations.push_back(hold);
    }
    return fixations;
}

*/</comment>



</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/database.h" hash="7f93ba36a5f801b0b961dd0a92f3eaf935056074"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file database.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DATABASE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATABASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVariant&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSqlDatabase&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSqlQuery&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSqlError&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gaze.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>Database</name> <block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>Database</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Database</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isDatabaseOpen</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>importExistingDatabase</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>fileExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>participantExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>calibrationExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>pluginResponseExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>startTransaction</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>commit</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>insertCalibration</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertCalibrationPoint</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertCalibrationSample</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertFile</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertFixation</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertFixationGaze</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertFixationRun</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertGaze</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertIDEContext</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertParticipant</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertSession</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>insertWebContext</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>getSessions</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>getAllIDEContextIDs</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>getGazesForSyntacticMapping</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>getGazesForSourceMapping</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>getGazeTargetsFromSession</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>getGazesFromSessionAndTarget</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>getFilesViewed</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getSessionFromParticipantAndTask</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>updateGazeWithSyntacticInfo</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>updateGazeWithTokenInfo</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>queryUpdateGazeWithSyntacticInfo</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>queryUpdateGazeWithTokenInfo</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>,<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>runFilterQuery</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>executeLongUpdateQuery</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>file_path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>open</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block">/*class Database {
public:

    QString checkAndReturnError();

    void startTransaction();
    void commit();

    void executeLongQuery(QString);





    QVector&lt;QString&gt; getAllIDEContextIDs();





    QVector&lt;QString&gt; getFixationRunIDs();
    QVector&lt;QVector&lt;QString&gt;&gt; getFixationsFromRunID(QString);




    QString getUpdateGazeWithSyntacticInfoQuery(QString,QString,QString);
    QString getUpdateGazeWithTokenInfoQuery(QString,QString,QString);



private:
    QSqlDatabase db;
    QString file_path;
};*/</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// DATABASE_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/fixation.cpp" hash="832e0fa31ef24f769f83d2070bd2bfa8902de498"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file fixation.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixation.h"</cpp:file></cpp:include>

<constructor><name><name>Fixation</name><operator>::</operator><name>Fixation</name></name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

<function><type><name>void</name></type> <name><name>Fixation</name><operator>::</operator><name>calculateDatabaseFields</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start_time</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>end_time</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gaze_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>candidate_targets</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>gaze</name> <range>: <expr><name>gaze_vec</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>gaze</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>fixation_event_time</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>fixation_event_time</name> <operator>&gt;</operator> <name><name>gaze</name><operator>.</operator><name>event_time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fixation_event_time</name> <operator>=</operator> <name><name>gaze</name><operator>.</operator><name>event_time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>gaze_count</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>start_time</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>start_time</name> <operator>&gt;</operator> <name><name>gaze</name><operator>.</operator><name>system_time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>gaze</name><operator>.</operator><name>system_time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>end_time</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>end_time</name> <operator>&lt;</operator> <name><name>gaze</name><operator>.</operator><name>system_time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end_time</name> <operator>=</operator> <name><name>gaze</name><operator>.</operator><name>system_time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>


        <expr_stmt><expr><name>left_pupil_diameter</name> <operator>+=</operator> <ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>left_pupil_diameter</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>gaze</name><operator>.</operator><name>left_pupil_diameter</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1.0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>gaze</name><operator>.</operator><name>left_pupil_diameter</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>right_pupil_diameter</name> <operator>+=</operator> <ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>right_pupil_diameter</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>gaze</name><operator>.</operator><name>left_pupil_diameter</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1.0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>gaze</name><operator>.</operator><name>right_pupil_diameter</name></name></expr></else></ternary></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>QString</name></type> <name>candidate_key</name> <init>= <expr><name><name>gaze</name><operator>.</operator><name>gaze_target</name></name> <operator>+</operator> <literal type="string">"\t"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>candidate_key</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>gaze</name><operator>.</operator><name>source_file_line</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>source_file_line</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>candidate_key</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>gaze</name><operator>.</operator><name>source_file_col</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>gaze</name><operator>.</operator><name>source_file_col</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>candidate_key</name> <operator>+=</operator> <name><name>gaze</name><operator>.</operator><name>source_token</name></name> <operator>+</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>candidate_key</name> <operator>+=</operator> <name><name>gaze</name><operator>.</operator><name>source_token_syntatic_context</name></name> <operator>+</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>candidate_key</name> <operator>+=</operator> <name><name>gaze</name><operator>.</operator><name>source_token_xpath</name></name> <operator>+</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>candidate_targets</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>candidate_key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>candidate_targets</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>candidate_key</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
        <else>else <block>{<block_content> <expr_stmt><expr><operator>++</operator><operator>(</operator><call><name><name>candidate_targets</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>candidate_key</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>most_frequent</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>candidate</name> <init>= <expr><call><name><name>candidate_targets</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>candidate</name> <operator>!=</operator> <call><name><name>candidate_targets</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>candidate</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>most_frequent</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="string">""</literal> <operator>||</operator> <name><name>most_frequent</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>candidate</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>most_frequent</name> <operator>=</operator> <operator>*</operator><name>candidate</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>QStringList</name></type> <name>fields</name> <init>= <expr><call><name><name>most_frequent</name><operator>.</operator><name>first</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>target</name> <operator>=</operator> <ternary><condition><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_line</name> <operator>=</operator> <ternary><condition><expr><name><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_col</name> <operator>=</operator> <ternary><condition><expr><name><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <ternary><condition><expr><name><name>fields</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>fields</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>syntactic_category</name> <operator>=</operator> <ternary><condition><expr><name><name>fields</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>fields</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>xpath</name> <operator>=</operator> <ternary><condition><expr><name><name>fields</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>fields</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><name>left_pupil_diameter</name> <operator>=</operator> <name>left_pupil_diameter</name> <operator>/</operator> <call><name>double</name><argument_list>(<argument><expr><name>gaze_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_pupil_diameter</name> <operator>=</operator> <name>right_pupil_diameter</name> <operator>/</operator> <call><name>double</name><argument_list>(<argument><expr><name>gaze_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>duration</name> <operator>=</operator> <name>end_time</name> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Fixation</name><operator>::</operator><name>print</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>fixation_event_time</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <call><name><name>target</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>source_file_line</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>source_file_col</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <call><name><name>token</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <call><name><name>syntactic_category</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <call><name><name>xpath</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>left_pupil_diameter</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>right_pupil_diameter</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name>duration</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/fixation.h" hash="1c6cbb0c7aff1f1efe502e3d5b4e146915625d26"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file fixation.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FIXATION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gaze.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<comment type="block">/*//////////////////////////////////////
gaze_vec - vector of gazes that go with this fixation
x, y - ? x and y coordinates of the fixation on the screen ?
left_pupil_diameter, right_pupil_diameter - average value of the user's pupil diameters. In millimeters
source_file_line, source_file_column - line and column position of the token of the fixation
duration - time in milliseconds of how long the fixation lasted
fixation_event_time - unix time of when the fixation occurred
target - file that the fixation occurred in
syntactic_category - category of syntax the token belongs to
token - what the fixation was looking at
xpath - the XML xpath to get the token
//////////////////////////////////////*/</comment>

<decl_stmt><decl><type><name>class</name></type> <name>Fixation</name> <block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>Fixation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>void</name></type> <name>calculateDatabaseFields</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// This could maybe be moved to a set if we want to ignore duplicates</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name> <name>gaze_vec</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>left_pupil_diameter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>right_pupil_diameter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>source_file_line</name></decl>, <decl><type ref="prev"/><name>source_file_col</name></decl>, <decl><type ref="prev"/><name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>fixation_event_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>target</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>syntactic_category</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>token</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>xpath</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// FIXATION_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/fixationalgorithm.cpp" hash="a7557ca8133f03dc4b348c928542c30701a6167a"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file fixationalgorithm.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixationalgorithm.h"</cpp:file></cpp:include>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name>FixationAlgorithm</name><operator>::</operator><name>getFixations</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>fixations</name></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/fixationalgorithm.h" hash="02d6bf7c54db26ec08dbdff63bd8a4391f913a09"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file fixationalgorithm.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FIXATIONALGORITHM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXATIONALGORITHM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gaze.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>FixationAlgorithm</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>FixationAlgorithm</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
    <macro><name>FixationAlgorithm</name><argument_list>(<argument>QVector&lt;Gaze&gt;&amp; g</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>session_gazes</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> </block_content>}</block>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>FixationAlgorithm</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;</expr_stmt>

    <function_decl><type><name>virtual</name> <name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name></type> <name>generateFixations</name><parameter_list>()</parameter_list><init>=<expr><literal type="number">0</literal></expr></init>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QString</name></type> <name>generateFixationSettings</name><parameter_list>()</parameter_list><init>=<expr><literal type="number">0</literal></expr></init>;</function_decl>

    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>getFixations</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
    <function_decl><type><name>virtual</name> <name>Fixation</name></type> <name>computeFixationEstimate</name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type></decl></parameter>)</parameter_list><init>=<expr><literal type="number">0</literal></expr></init>;</function_decl>

    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>session_gazes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name></type> <name>fixations</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// FIXATIONALGORITHM_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/gaze.cpp" hash="2d93f0a364a608d417c8ea67ae480f0ded27c7f4"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file gaze.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gaze.h"</cpp:file></cpp:include>

<constructor><name><name>Gaze</name><operator>::</operator><name>Gaze</name></name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

<constructor><name><name>Gaze</name><operator>::</operator><name>Gaze</name></name><parameter_list>(<parameter><decl><type><name>QSqlQuery</name><modifier>&amp;</modifier></type> <name>gaze_data</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <comment type="line">// Core Data</comment>
    <expr_stmt><expr><name>event_time</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>system_time</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>left_pupil_diameter</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_pupil_diameter</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>left_validation</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_validation</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Plugin Data</comment>
    <expr_stmt><expr><name>gaze_target</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gaze_target_type</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_line</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_col</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token_xpath</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token_syntatic_context</name> <operator>=</operator> <call><name><name>gaze_data</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor><comment type="line">//*/</comment>

<constructor><name><name>Gaze</name><operator>::</operator><name>Gaze</name></name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Core Data</comment>
    <expr_stmt><expr><name>event_time</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>system_time</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>left_pupil_diameter</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_pupil_diameter</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>left_validation</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_validation</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Plugin Data</comment>
    <expr_stmt><expr><name>gaze_target</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gaze_target_type</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_line</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_col</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token_xpath</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token_syntatic_context</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>Gaze</name><operator>::</operator><name>Gaze</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Gaze</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Core Data</comment>
    <expr_stmt><expr><name>event_time</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>event_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>system_time</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>system_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>left_pupil_diameter</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>left_pupil_diameter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_pupil_diameter</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>right_pupil_diameter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>left_validation</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>left_validation</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>right_validation</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>right_validation</name></name></expr>;</expr_stmt>

    <comment type="line">// Plugin Data</comment>
    <expr_stmt><expr><name>gaze_target</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>gaze_target</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gaze_target_type</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>gaze_target_type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_line</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>source_file_line</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_file_col</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>source_file_col</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>source_token</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token_xpath</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>source_token_xpath</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>source_token_syntatic_context</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>source_token_syntatic_context</name></name></expr>;</expr_stmt>
</block_content>}</block></constructor>


<comment type="line">// Determines if the gaze data is valid. Can be altered later.</comment>
<function><type><name>bool</name></type> <name><name>Gaze</name><operator>::</operator><name>isValid</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>left_validation</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right_validation</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Gaze</name><operator>::</operator><name>print</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>event_time</name>
              <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>system_time</name> <operator>&lt;&lt;</operator> <name>left_pupil_diameter</name>
              <operator>&lt;&lt;</operator> <name>right_pupil_diameter</name> <operator>&lt;&lt;</operator> <call><name><name>gaze_target</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call>
              <operator>&lt;&lt;</operator> <call><name><name>gaze_target_type</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call>
              <operator>&lt;&lt;</operator> <name>source_file_line</name> <operator>&lt;&lt;</operator> <name>source_file_col</name> <operator>&lt;&lt;</operator> <call><name><name>source_token</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call>
              <operator>&lt;&lt;</operator> <call><name><name>source_token_xpath</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>source_token_syntatic_context</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/gaze.h" hash="7743eb598a96d50384bbebc5d80e8bab2dc98289"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file gaze.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GAZE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAZE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSqlQuery&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVariant&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>class</name></type> <name>Gaze</name> <block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>Gaze</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Gaze</name><argument_list>(<argument><expr><name>QSqlQuery</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Gaze</name><argument_list>(<argument><expr><name>char</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Gaze</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Gaze</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>int</name></type> <name>left_validation</name></decl>, <decl><type ref="prev"/><name>right_validation</name></decl>,
        <decl><type ref="prev"/><name>source_file_line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>source_file_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>event_time</name></decl>, <decl><type ref="prev"/><name>system_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>left_pupil_diameter</name></decl>, <decl><type ref="prev"/><name>right_pupil_diameter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>gaze_target</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>gaze_target_type</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>source_token</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>source_token_xpath</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>source_token_syntatic_context</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;,const Gaze&amp;);</comment>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// GAZE_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/idtalgorithm.cpp" hash="de450bdb638771a6fffefe5bf47b8f4717f287d8"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file idtalgorithm.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idtalgorithm.h"</cpp:file></cpp:include>

<comment type="line">//Helper Functions</comment>
<function><type><name>bool</name></type> <name>compareX</name><parameter_list>(<parameter><decl><type><name>Gaze</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Gaze</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>i</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>j</name><operator>.</operator><name>x</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>compareY</name><parameter_list>(<parameter><decl><type><name>Gaze</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Gaze</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>i</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>j</name><operator>.</operator><name>y</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>double</name></type> <name>computeGazeDifference</name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>gazes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>xmax</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max_element</name></name><argument_list>(<argument><expr><call><name><name>gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>gazes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>compareX</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>x</name></expr></init></decl>,
           <decl><type ref="prev"/><name>xmin</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min_element</name></name><argument_list>(<argument><expr><call><name><name>gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>gazes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>compareX</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>x</name></expr></init></decl>,
           <decl><type ref="prev"/><name>ymax</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max_element</name></name><argument_list>(<argument><expr><call><name><name>gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>gazes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>compareY</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>y</name></expr></init></decl>,
           <decl><type ref="prev"/><name>ymin</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min_element</name></name><argument_list>(<argument><expr><call><name><name>gazes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>gazes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>compareY</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>y</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>double</name> <name>final</name> <operator>=</operator> <operator>(</operator><name>xmax</name> <operator>-</operator> <name>xmin</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ymax</name> <operator>-</operator> <name>ymin</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>final</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>IDTAlgorithm</name><operator>::</operator><name>IDTAlgorithm</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>gazes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_duration</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_dispersion</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>FixationAlgorithm</name><argument_list>(<argument><expr><name>gazes</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
    <expr_stmt><expr><name>duration_window</name> <operator>=</operator> <name>_duration</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dispersion</name> <operator>=</operator> <name>_dispersion</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name></type> <name><name>IDTAlgorithm</name><operator>::</operator><name>generateFixations</name></name><parameter_list>()</parameter_list> <block>{<block_content>

    <comment type="line">//This code follows the IDT Algorithm</comment>

    <comment type="line">//Step 1 should already be done</comment>

    <comment type="line">//Step 2 - Calculate velocity between each point and generate Fixations</comment>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>window</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>duration_window</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name><name>session_gazes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>session_gazes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>computeGazeDifference</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>dispersion</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>window</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>duration_window</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <while>while<condition>(<expr><call><name>computeGazeDifference</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>dispersion</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>session_gazes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content> <break>break;</break> </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>fixations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>computeFixationEstimate</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><call><name><name>window</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>duration_window</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><call><name><name>window</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>duration_window</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>fixations</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Fixation</name></type> <name><name>IDTAlgorithm</name><operator>::</operator><name>computeFixationEstimate</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>fixation_points</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Fixation</name></type> <name>fixation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>x_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>point</name> <range>: <expr><name>fixation_points</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>x_total</name> <operator>+=</operator> <name><name>point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y_total</name> <operator>+=</operator> <name><name>point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fixation</name><operator>.</operator><name>gaze_vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x_total</name> <operator>/</operator> <call><name><name>fixation_points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y_total</name> <operator>/</operator> <call><name><name>fixation_points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>fixation</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>IDTAlgorithm</name><operator>::</operator><name>generateFixationSettings</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"IDT,"</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>dispersion</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>duration_window</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/idtalgorithm.h" hash="2273166cee2d1259a13d64951bcc2800efcb7526"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file idtalgorithm.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IDTALGORITHM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDTALGORITHM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixationalgorithm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>IDTAlgorithm</name> <range>: <expr><name>public</name> <name>FixationAlgorithm</name><block>{
<expr><name>public</name><operator>:</operator>
    <macro><name>IDTAlgorithm</name><argument_list>(<argument>QVector&lt;Gaze&gt; gazes</argument>, <argument>int _duration</argument>, <argument>int _dispersion</argument>)</argument_list></macro></expr>;
    <expr><operator>~</operator><macro><name>IDTAlgorithm</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;

    <expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name> <macro><name>generateFixations</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
    <expr><name>QString</name> <macro><name>generateFixationSettings</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
    <name>Fixation</name> <macro><name>computeFixationEstimate</name><argument_list>(<argument>QVector&lt;Gaze&gt;</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>int</name> <name>duration_window</name></expr>;
    <expr><name>int</name> <name>dispersion</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// IDTALGORITHM_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/ivtalgorithm.cpp" hash="2dff3b4d561e750b62d4ffd2961989cf13ac3ab1"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file ivtalgorithm.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivtalgorithm.h"</cpp:file></cpp:include>

<comment type="line">//Helper Functions</comment>
<function><type><name>double</name></type> <name>calculateGazeVelocity</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>vx</name> <init>= <expr><name>x1</name> <operator>-</operator> <name>x2</name></expr></init></decl>,
           <decl><type ref="prev"/><name>vy</name> <init>= <expr><name>y1</name> <operator>-</operator> <name>y2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>vx</name><operator>*</operator><name>vx</name><operator>)</operator><operator>+</operator><operator>(</operator><name>vy</name><operator>*</operator><name>vy</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>IVTAlgorithm</name><operator>::</operator><name>IVTAlgorithm</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>gazes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_velocity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_duration_ms</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>FixationAlgorithm</name><argument_list>(<argument><expr><name>gazes</name></expr></argument>)</argument_list></call></member_init_list><block>{<block_content>
    <expr_stmt><expr><name>velocity_threshold</name> <operator>=</operator> <name>_velocity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>duration_ms</name> <operator>=</operator> <name>_duration_ms</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name></type> <name><name>IVTAlgorithm</name><operator>::</operator><name>generateFixations</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//This code follows the IVT Algorithm</comment>

    <comment type="line">//Step 1 should already be done</comment>

    <comment type="line">//Step 2 -  Calculate velocity between each gaze point</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>velocity_vector</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>velocity_vector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>session_gazes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>velocity_vector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>calculateGazeVelocity</name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">//Step 3 - Calculate fixation groupings</comment>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>fixation_groups</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fix_number</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>on_saccade</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>session_gazes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>velocity_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>velocity_threshold</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>fixation_groups</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name><name>session_gazes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>fix_number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>on_saccade</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><operator>!</operator><name>on_saccade</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>on_saccade</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>fix_number</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">//Step 4 - Filter the fixation groupings</comment>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>tmp</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>fixation_groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>fixation_groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <name><name>fixation_groups</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>fixation_groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>fixation_groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <name><name>fixation_groups</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>fixation_groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Fixation</name></type> <name>fix</name> <init>= <expr><call><name>computeFixationEstimate</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>fix</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>fixations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Fixation</name></type> <name>fix</name> <init>= <expr><call><name>computeFixationEstimate</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>fix</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>fixations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>fixations</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Fixation</name></type> <name><name>IVTAlgorithm</name><operator>::</operator><name>computeFixationEstimate</name></name><parameter_list>(<parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Gaze</name></expr></argument>&gt;</argument_list></name></type> <name>fixation_points</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Fixation</name></type> <name>fixation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>x_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
           <decl><type ref="prev"/><name>y_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>point</name> <range>: <expr><name>fixation_points</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>x_total</name> <operator>+=</operator> <name><name>point</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y_total</name> <operator>+=</operator> <name><name>point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fixation</name><operator>.</operator><name>gaze_vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><call><name><name>fixation_points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>fixation</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>fixation_points</name><index>[<expr><call><name><name>fixation_points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>system_time</name> <operator>-</operator> <name><name>fixation_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>system_time</name><operator>)</operator> <operator>&gt;=</operator> <name>duration_ms</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x_total</name> <operator>/</operator> <call><name><name>fixation_points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y_total</name> <operator>/</operator> <call><name><name>fixation_points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fixation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>fixation</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>IVTAlgorithm</name><operator>::</operator><name>generateFixationSettings</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"IVT,"</literal><operator>+</operator><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>velocity_threshold</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">","</literal><operator>+</operator><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>duration_ms</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/ivtalgorithm.h" hash="cc9c0daaa9b5ff9d882600c6a3a2f8ca759b666b"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file ivtalgorithm.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IVTALGORITHM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVTALGORITHM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fixationalgorithm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>IVTAlgorithm</name><range>: <expr><name>public</name> <name>FixationAlgorithm</name> <block>{
<expr><name>public</name><operator>:</operator>
    <macro><name>IVTAlgorithm</name><argument_list>(<argument>QVector&lt;Gaze&gt; gazes</argument>, <argument>int _velocity</argument>, <argument>int _duration_ms</argument>)</argument_list></macro></expr>;
    <expr><operator>~</operator><macro><name>IVTAlgorithm</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;

    <expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Fixation</name></expr></argument>&gt;</argument_list></name> <macro><name>generateFixations</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
    <expr><name>QString</name> <macro><name>generateFixationSettings</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>private</name><operator>:</operator>
    <name>Fixation</name> <macro><name>computeFixationEstimate</name><argument_list>(<argument>QVector&lt;Gaze&gt;</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>int</name> <name>velocity_threshold</name></expr>;
    <expr><name>int</name> <name>duration_ms</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// IVTALGORITHM_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/logger.cpp" hash="4dccdce265b13b9f79b863ea1c52e938814d4f17"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file logger.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// This file is required because, for whatever reason, QT throws a fit</comment>
<comment type="line" format="doxygen">/// when static members are defined inside header files</comment>
<comment type="line" format="doxygen">///</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logger.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>Logger</name><modifier>*</modifier></type> <name><name>Logger</name><operator>::</operator><name>internal_inst</name></name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/logger.h" hash="961bc380bb9578d63bb6fc7e2391d34030cb4ca2"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file logger.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOGGER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdarg&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>Logger</name> <block>{<block_content>
<label><name>public</name>:</label>
    <function><type><specifier>static</specifier> <name>Logger</name><modifier>*</modifier></type> <name>instance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>internal_inst</name> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>internal_inst</name> <operator>=</operator> <name>new</name> <name>Logger</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <return>return <expr><name>internal_inst</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*template&lt;typename T&gt;
    void write(const T&amp; t) {
        if(lineEnded) { writeTime(); }
        log &lt;&lt; t;
        lineEnded = false;
    }*/</comment>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>writeLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>lineEnded</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>writeTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>log</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <name>type</name> <operator>&lt;&lt;</operator> <literal type="string">"] "</literal> <operator>&lt;&lt;</operator> <name>text</name> <operator>&lt;&lt;</operator> <name>std</name><operator>::</operator><name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lineEnded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

<label><name>private</name>:</label>
    <comment type="line">// Privatize the Default Constructor for Singleton</comment>
    <macro><name>Logger</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>log</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>ofstream</name><argument_list>(<argument><expr><literal type="string">"output_log.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>writeTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>writeLine</name><argument_list>(<argument><expr><literal type="string">"INFO"</literal></expr></argument>,<argument><expr><literal type="string">"Log file created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block><empty_stmt>;</empty_stmt>

    <comment type="line">// Function that writes time at the beginning of each log entry</comment>
    <function><type><name>void</name></type> <name>writeTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>log</name> <operator>&lt;&lt;</operator> <name>QDateTime</name><operator>::</operator><call><name>currentDateTime</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUtf8</name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Disabled for Singleton</comment>
    <macro><name>Logger</name><argument_list>(<argument>const Logger&amp;</argument>)</argument_list></macro> <block>{<block_content/>}</block>
    <decl_stmt><decl><type><name>Logger</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Logger</name><operator>&amp;</operator><operator>)</operator> <block>{}</block>

    <specifier>static</specifier> <name>Logger</name><operator>*</operator> <name>internal_inst</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>ofstream</name> <name>log</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>lineEnded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// LOGGER_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/main.cpp" hash="cf517c9225f8cf45a41460b0dbe850899043e5e2"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file main.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QQmlApplicationEngine&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QQmlContext&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"participantsmodel.h"</cpp:file></cpp:include>
<comment type="line">//#include "control.h"</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QCoreApplication</name><operator>::</operator><name>setAttribute</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>AA_EnableHighDpiScaling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QApplication</name></type> <name>app</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>setOrganizationName</name></name><argument_list>(<argument><expr><literal type="string">"i-Trace.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>setOrganizationDomain</name></name><argument_list>(<argument><expr><literal type="string">"Eye Tracking Framework"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>qmlRegisterType</name><argument_list type="generic">&lt;<argument><expr><name>ParticipantsModel</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"Participants"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ParticipantsModel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>qmlRegisterUncreatableType</name><argument_list type="generic">&lt;<argument><expr><name>ParticipantsList</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"Participants"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ParticipantsList"</literal></expr></argument>, <argument><expr><call><name>QStringLiteral</name><argument_list>(<argument><expr><literal type="string">"Participants should not be created in QML"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ParticipantsList</name></type> <name>participants</name></decl>;</decl_stmt>



    <decl_stmt><decl><type><name>QQmlApplicationEngine</name></type> <name>engine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>QUrl</name></type> <name>url</name><argument_list>(<argument><expr><call><name>QStringLiteral</name><argument_list>(<argument><expr><literal type="string">"qrc:/main.qml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>QObject</name><operator>::</operator><name>connect</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>engine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QQmlApplicationEngine</name><operator>::</operator><name>objectCreated</name></name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>app</name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>url</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QUrl</name> <modifier>&amp;</modifier></type><name>objUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>&amp;&amp;</operator> <name>url</name> <operator>==</operator> <name>objUrl</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>QCoreApplication</name><operator>::</operator><name>exit</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>QueuedConnection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>engine</name><operator>.</operator><name>rootContext</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setContextProperty</name><argument_list>(<argument><expr><literal type="string">"participants"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>participants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>engine</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>app</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/participantsmodel.cpp" hash="4f8896efe92811c26aedcf8cab6a1990a3456eb9"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file participantsmodel.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"participantsmodel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database.h"</cpp:file></cpp:include>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// ParticipantsList</comment>
<constructor><name><name>ParticipantsList</name><operator>::</operator><name>ParticipantsList</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Task</name></expr></argument>&gt;</argument_list></name></type> <name><name>ParticipantsList</name><operator>::</operator><name>items</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><name>nTasks</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name><name>ParticipantsList</name><operator>::</operator><name>getSelected</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>rtn</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><call><name>items</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rtn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>sessionID</name></name> <operator>+</operator> <literal type="string">" - "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>i</name><operator>.</operator><name>selected</name></name></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>rtn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>ParticipantsList</name><operator>::</operator><name>setItemAt</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Task</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <call><name><name>nTasks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// If index is out of bounds return false to notify that nothing has changed</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Task</name><modifier>&amp;</modifier></type> <name>oldItem</name> <init>= <expr><call><name><name>nTasks</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>item</name><operator>.</operator><name>selected</name></name> <operator>==</operator> <name><name>oldItem</name><operator>.</operator><name>selected</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>sessionID</name></name> <operator>==</operator> <name><name>oldItem</name><operator>.</operator><name>sessionID</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// If modified item and old item are the same do nothing and return false</comment>

    <expr_stmt><expr><name><name>nTasks</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ParticipantsList</name><operator>::</operator><name>clearTasks</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>nTasks</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ParticipantsList</name><operator>::</operator><name>appendTask</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>sessionID</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <emit>emit <expr><call><name>preItemAppended</name><argument_list>()</argument_list></call></expr>;</emit>

    <decl_stmt><decl><type><name>Task</name></type> <name>task</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>task</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>task</name><operator>.</operator><name>sessionID</name></name> <operator>=</operator> <name>sessionID</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nTasks</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <emit>emit <expr><call><name>postItemAppended</name><argument_list>()</argument_list></call></expr>;</emit>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ParticipantsList</name><operator>::</operator><name>removeTask</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>sessionId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nTasks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>nTasks</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>sessionID</name> <operator>==</operator> <name>sessionId</name></expr>)</condition> <block>{<block_content>
            <emit>emit <expr><call><name>preItemRemoved</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</emit>

            <expr_stmt><expr><call><name><name>nTasks</name><operator>.</operator><name>removeAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <emit>emit <expr><call><name>postItemRemoved</name><argument_list>()</argument_list></call></expr>;</emit>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// ParticipantsModel</comment>

<constructor><name><name>ParticipantsModel</name><operator>::</operator><name>ParticipantsModel</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>QAbstractListModel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>, <call><name>modelList</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name>int</name></type> <name><name>ParticipantsModel</name><operator>::</operator><name>rowCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <comment type="line">// For list models only the root node (an invalid parent) should return the list's size. For all</comment>
    <comment type="line">// other (valid) parents, rowCount() should return 0 so that it does not become a tree model.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>parent</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>modelList</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>modelList</name><operator>-&gt;</operator><name>items</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QVariant</name></type> <name><name>ParticipantsModel</name><operator>::</operator><name>data</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>modelList</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Task</name></type> <name>t</name> <init>= <expr><call><name><name>modelList</name><operator>-&gt;</operator><name>items</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>row</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>role</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DoneRole</name></expr>:</case>
        <return>return <expr><call><name>QVariant</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>selected</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>DescriptionRole</name></expr>:</case>
        <return>return <expr><call><name>QVariant</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>ParticipantsModel</name><operator>::</operator><name>setData</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QVariant</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>modelList</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>Task</name></type> <name>t</name> <init>= <expr><call><name><name>modelList</name><operator>-&gt;</operator><name>items</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>row</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>role</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DoneRole</name></expr>:</case>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>toBool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>DescriptionRole</name></expr>:</case>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>sessionID</name></name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><call><name><name>modelList</name><operator>-&gt;</operator><name>setItemAt</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>row</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <emit>emit <expr><call><name>dataChanged</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>role</name></expr></argument>)</argument_list></call></expr>;</emit>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>Qt</name><operator>::</operator><name>ItemFlags</name></name></type> <name><name>ParticipantsModel</name><operator>::</operator><name>flags</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>Qt</name><operator>::</operator><name>NoItemFlags</name></name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>Qt</name><operator>::</operator><name>ItemIsEditable</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>QHash</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>QByteArray</name></expr></argument>&gt;</argument_list></name></type> <name><name>ParticipantsModel</name><operator>::</operator><name>roleNames</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QHash</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>QByteArray</name></expr></argument>&gt;</argument_list></name></type> <name>names</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>names</name><index>[<expr><name>DoneRole</name></expr>]</index></name> <operator>=</operator> <literal type="string">"done"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>names</name><index>[<expr><name>DescriptionRole</name></expr>]</index></name> <operator>=</operator> <literal type="string">"description"</literal></expr>;</expr_stmt>
    <return>return <expr><name>names</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ParticipantsList</name><modifier>*</modifier></type> <name><name>ParticipantsModel</name><operator>::</operator><name>getModelList</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><name>modelList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ParticipantsModel</name><operator>::</operator><name>setModelList</name></name><parameter_list>(<parameter><decl><type><name>ParticipantsList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>beginResetModel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Must be called before the source of a model changes</comment>

    <if_stmt><if>if<condition>(<expr><name>modelList</name></expr>)</condition> <block>{<block_content><comment type="line">// If the model is connected to a list already</comment>
        <expr_stmt><expr><call><name><name>modelList</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we disconnect it from the old list to prepare for the new one</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//delete modelList;</comment>
    <expr_stmt><expr><name>modelList</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>modelList</name></expr>)</condition> <block>{<block_content> <comment type="line">// If a valid list was set</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>modelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParticipantsList</name><operator>::</operator><name>preItemAppended</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>=</modifier></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content> <comment type="line">// Connects this lambda to the preItemAppendedSignal</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <name>index</name> = <name><name>modelList</name><operator>-&gt;</operator><name>items</name></name>(</type></decl>).size(</decl_stmt>)</block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
            <expr_stmt><expr><call><name>beginInsertRows</name><argument_list>(<argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 2nd and 3rd parameters tell which indicies to start and end insertion</comment>
            <comment type="line">// As insert is one beyond the current end of the list, we add to the end of the list</comment>
        </block_content>}</block></if></if_stmt>)</block_content></block>;</function>

        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>modelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParticipantsList</name><operator>::</operator><name>postItemAppended</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>=</modifier></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>endInsertRows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>modelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParticipantsList</name><operator>::</operator><name>preItemRemoved</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>=</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>beginRemoveRows</name><argument_list>(<argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>modelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParticipantsList</name><operator>::</operator><name>postItemRemoved</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>=</modifier></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>endRemoveRows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }
    endResetModel<expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
}
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/participantsmodel.h" hash="38627d4e4c590ea3793293a0b1b207bcc76db824"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file participantsmodel.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PARTICIPANTSMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARTICIPANTSMODEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractListModel&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logger.h"</cpp:file></cpp:include>

<struct>struct <name>Task</name> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>selected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>sessionID</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ParticipantsList</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>ParticipantsList</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

    <expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Task</name></expr></argument>&gt;</argument_list></name> <macro><name>items</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>Q_INVOKABLE</name> <name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name> <macro><name>getSelected</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>bool</name> <macro><name>setItemAt</name><argument_list>(<argument>int index</argument>, <argument>const Task&amp; item</argument>)</argument_list></macro></expr>;

    <expr><name>void</name> <call><name>clearTasks</name><argument_list>()</argument_list></call></expr>;


<expr><name>signals</name><operator>:</operator>
    <name>void</name> <call><name>preItemAppended</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>postItemAppended</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>preItemRemoved</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>postItemRemoved</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name> <name>slots</name><operator>:</operator>
    <name>void</name> <call><name>appendTask</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>sessionId</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>removeTask</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>sessionId</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>Task</name></expr></argument>&gt;</argument_list></name> <name>nTasks</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ParticipantsModel</name> <range>: <expr><name>public</name> <name>QAbstractListModel</name>
<block>{
    <expr><name>Q_OBJECT</name>
    <macro><name>Q_PROPERTY</name><argument_list>(<argument>ParticipantsList* list READ getModelList WRITE setModelList</argument>)</argument_list></macro>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>ParticipantsModel</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

    enum <expr><block>{
        <expr><name>DoneRole</name> <operator>=</operator> <name>Qt</name><operator>::</operator><name>UserRole</name></expr>,
        <expr><name>DescriptionRole</name></expr>
    }</block></expr>;

    <comment type="line">// Basic functionality:</comment>
    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp;parent = QModelIndex()</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

    <expr><name>QVariant</name> <macro><name>data</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>int role = Qt::DisplayRole</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

    <comment type="line">// Editable:</comment>
    <expr><name>bool</name> <macro><name>setData</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>const QVariant &amp;value</argument>,
                 <argument>int role = Qt::EditRole</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>Qt</name><operator>::</operator><name>ItemFlags</name> <macro><name>flags</name><argument_list>(<argument>const QModelIndex&amp; index</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

    <expr><name><name>QHash</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>QByteArray</name></expr></argument>&gt;</argument_list></name> <macro><name>roleNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

    <expr><name>Q_INVOKABLE</name> <name>ParticipantsList</name><operator>*</operator> <macro><name>getModelList</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>void</name> <call><name>setModelList</name><argument_list>(<argument><expr><name>ParticipantsList</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>Q_INVOKABLE</name> <name>void</name> <macro><name>appendTask</name><argument_list>(<argument>const QString&amp; sessionID</argument>)</argument_list></macro> <block>{<expr><call><name><name>modelList</name><operator>-&gt;</operator><name>appendTask</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;}</block>

    <name>Q_INVOKABLE</name> <name>void</name> <macro><name>clearTasks</name><argument_list>()</argument_list></macro> <block>{
        <expr><call><name><name>modelList</name><operator>-&gt;</operator><name>clearTasks</name></name><argument_list>()</argument_list></call></expr>;
        <comment type="line">//setModelList(modelList); // Old code that caused a Heap error</comment>
        <macro><name>setModelList</name><argument_list>(<argument>new ParticipantsList()</argument>)</argument_list></macro>;
    }</block>

<name>private</name><operator>:</operator>
    <name>ParticipantsList</name><operator>*</operator> <name>modelList</name></expr>;
    <expr><name>Logger</name><operator>*</operator> <name>log</name> <operator>=</operator> <name>Logger</name><operator>::</operator><call><name>instance</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// PARTICIPANTSMODEL_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/srcmlhandler.cpp" hash="d69f375aaad6f79609a1cc7051c0d4bd926659cc"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file srcmlhandler.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srcmlhandler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<constructor><name><name>SRCMLHandler</name><operator>::</operator><name>SRCMLHandler</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>file_path</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>bool</name></type> <name><name>SRCMLHandler</name><operator>::</operator><name>isPositional</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QIODevice</name><operator>::</operator><name>ReadOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QXmlStreamReader</name></type> <name>parser</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>readNextStartElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><call><name><name>parser</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"unit"</literal></expr>)</condition> <block>{<block_content>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>decl</name> <range>: <expr><call><name><name>parser</name><operator>.</operator><name>namespaceDeclarations</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>decl</name><operator>.</operator><name>prefix</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"pos"</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name><name>SRCMLHandler</name><operator>::</operator><name>getAllFilenames</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QIODevice</name><operator>::</operator><name>ReadOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QXmlStreamReader</name></type> <name>parser</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>files</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>!</operator><call><name><name>parser</name><operator>.</operator><name>atEnd</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>parser</name><operator>.</operator><name>readNextStartElement</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>parser</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"unit"</literal></expr>)</condition> <block>{<block_content>
                <for>for<control>(<init><decl><type><name>auto</name></type> <name>attr</name> <range>: <expr><call><name><name>parser</name><operator>.</operator><name>attributes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><call><name><name>attr</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"filename"</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>attr</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>files</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>SRCMLHandler</name><operator>::</operator><name>getUnitText</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>unit_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>srcml_namespace</name> <init>= <expr><literal type="string">"declare default element namespace \"http://www.srcML.org/srcML/src\"; declare namespace re=\"http://exslt.org/regular-expressions\";"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QIODevice</name><operator>::</operator><name>ReadOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>query_string</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"doc($file)//unit[@filename = \""</literal><operator>+</operator><name>unit_filename</name><operator>+</operator><literal type="string">"\"]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>full_xquery</name> <init>= <expr><name>srcml_namespace</name> <operator>+</operator> <name>query_string</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QXmlQuery</name></type> <name>query_results</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query_results</name><operator>.</operator><name>bindVariable</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>query_results</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><name>full_xquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>query_results</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">"INVALID QUERY"</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>results</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query_results</name><operator>.</operator><name>evaluateTo</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>SRCMLHandler</name><operator>::</operator><name>getUnitBody</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>unit_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>srcml_namespace</name> <init>= <expr><literal type="string">"declare default element namespace \"http://www.srcML.org/srcML/src\"; declare namespace re=\"http://exslt.org/regular-expressions\";"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QIODevice</name><operator>::</operator><name>ReadOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>query_string</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"doc($file)//unit[@filename = \""</literal><operator>+</operator><name>unit_filename</name><operator>+</operator><literal type="string">"\"]/string()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>full_xquery</name> <init>= <expr><name>srcml_namespace</name> <operator>+</operator> <name>query_string</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QXmlQuery</name></type> <name>query_results</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query_results</name><operator>.</operator><name>bindVariable</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>query_results</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><name>full_xquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>query_results</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">"INVALID QUERY"</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>results</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query_results</name><operator>.</operator><name>evaluateTo</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>




</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/srcmlhandler.h" hash="293daa4799069680796dc5ac7f407674cd3fb25f"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file srcmlhandler.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SRCMLHANDLER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRCMLHANDLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QXmlQuery&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QXmlStreamReader&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFile&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>class</name></type> <name>SRCMLHandler</name> <block>{<block_content>

<label><name>public</name>:</label>
    <macro><name>SRCMLHandler</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>SRCMLHandler</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>bool</name></type> <name>isPositional</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>QString</name></type> <name>getFilePath</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>file_path</name></expr>;</return> </block_content>}</block></function>

    <function_decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>getAllFilenames</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>getUnitText</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getUnitBody</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>


<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>QString</name></type> <name>file_path</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SRCMLHANDLER_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/srcmlmapper.cpp" hash="caa4effb833540105c6fc53e41fb9cbed4c811c1"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file srcmlmapper.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srcmlmapper.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>setLineTextToken</name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>source_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>syntactic_context</name></decl></parameter>, <parameter><decl><type><name>QString</name><modifier>&amp;</modifier></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>QString</name><modifier>&amp;</modifier></type> <name>token_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// token_type is currently unused?</comment>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>delimiters</name> <init>= <expr><block>{
        <expr><literal type="string">"("</literal></expr>,<expr><literal type="string">")"</literal></expr>,<expr><literal type="string">"{"</literal></expr>,<expr><literal type="string">"}"</literal></expr>,<expr><literal type="string">"."</literal></expr>,<expr><literal type="string">","</literal></expr>,
        <expr><literal type="string">"="</literal></expr>,<expr><literal type="string">"+"</literal></expr>,<expr><literal type="string">"-"</literal></expr>,<expr><literal type="string">"*"</literal></expr>,<expr><literal type="string">"/"</literal></expr>,<expr><literal type="string">"%"</literal></expr>,
        <expr><literal type="string">"@"</literal></expr>,<expr><literal type="string">"|"</literal></expr>,<expr><literal type="string">"&amp;"</literal></expr>,<expr><literal type="string">"^"</literal></expr>,<expr><literal type="string">"&lt;"</literal></expr>,<expr><literal type="string">"&gt;"</literal></expr>,
        <expr><literal type="string">":"</literal></expr>,<expr><literal type="string">"?"</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>col</name></expr></init></decl>,
        <decl><type ref="prev"/><name>end</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <comment type="line">// Whitespace</comment>
    <if_stmt><if>if<condition>(<expr><name><name>source_line</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <literal type="string">"WHITESPACE"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// COMMENT (look for surrounding whitespace</comment>
    <if type="elseif">else if<condition>(<expr><call><name><name>syntactic_context</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <while>while<condition>(<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source_line</name><index>[<expr><name>start</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>--</operator><name>start</name></expr>;</expr_stmt> </block_content>}</block></while>
        <while>while<condition>(<expr><name>end</name> <operator>&lt;=</operator> <call><name><name>source_line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source_line</name><index>[<expr><name>end</name></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt> </block_content>}</block></while>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>source_line</name><operator>.</operator><name>mid</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>,<argument><expr><name>end</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Operator or a delimiter</comment>
    <if type="elseif">else if<condition>(<expr><call><name><name>delimiters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>source_line</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>source_line</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">//while(start - 1 &gt;= 0 &amp;&amp; !source_line[start - 1].isSpace() &amp;&amp; delimiters.contains(source_line[start-1]+token)) {</comment>
        <while>while<condition>(<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source_line</name><index>[<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>delimiters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>source_line</name><index>[<expr><name>start</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>--</operator><name>start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>source_line</name><index>[<expr><name>start</name></expr>]</index></name> <operator>+</operator> <name>token</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <comment type="line">//while(end + 1 &lt;= source_line.size() - 1 &amp;&amp; !source_line[end].isSpace() &amp;&amp; delimiters.contains(token + source_line[end+1])) {</comment>
        <while>while<condition>(<expr><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <call><name><name>source_line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source_line</name><index>[<expr><name>end</name></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>delimiters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>source_line</name><index>[<expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>token</name> <operator>+=</operator> <name><name>source_line</name><index>[<expr><name>end</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <while>while<condition>(<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source_line</name><index>[<expr><name>start</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>delimiters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>source_line</name><index>[<expr><name>start</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>--</operator><name>start</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while<condition>(<expr><name>end</name> <operator>&lt;=</operator> <call><name><name>source_line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source_line</name><index>[<expr><name>end</name></expr>]</index></name><operator>.</operator><call><name>isSpace</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>delimiters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name><name>source_line</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>source_line</name><operator>.</operator><name>mid</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>,<argument><expr><name>end</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>SRCMLMapper</name><operator>::</operator><name>mapSyntax</name></name><parameter_list>(<parameter><decl><type><name>SRCMLHandler</name><modifier>&amp;</modifier></type> <name>srcml</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>unit_path</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>project_path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>valid_sessions</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr><call><name><name>idb</name><operator>.</operator><name>getGazesForSyntacticMapping</name></name><argument_list>(<argument><expr><name>project_path</name></expr></argument>,<argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>unit_data</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n"</literal> <operator>+</operator> <call><name><name>srcml</name><operator>.</operator><name>getUnitText</name></name><argument_list>(<argument><expr><name>unit_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n&lt;/xml&gt;"</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><name>QDomDocument</name></type> <name>unit</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>unit</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><name>unit_data</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QDomElement</name></expr></argument>&gt;</argument_list></name></type> <name>elements</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>elements</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>unit</name><operator>.</operator><name>documentElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QDomElement</name></type> <name>first</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>documentElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>firstChildElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QDomElement</name></expr></argument>&gt;</argument_list></name></type> <name>parents</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>parents</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <while>while<condition>(<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QDomElement</name></type> <name>crnt</name> <init>= <expr><name><name>parents</name><index>[<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>elements</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>crnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>crnt</name><operator>.</operator><name>firstChildElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parents</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>crnt</name><operator>.</operator><name>firstChildElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name><name>crnt</name><operator>.</operator><name>nextSiblingElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>parents</name><index>[<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>crnt</name><operator>.</operator><name>nextSiblingElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <while>while<condition>(<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parents</name><index>[<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>nextSiblingElement</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parents</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if<condition>(<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>parents</name><index>[<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parents</name><index>[<expr><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>nextSiblingElement</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">//QString big_query = "";</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>cached_gazes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>response</name> <range>: <expr><name>responses</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>valid_sessions</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res_line</name> <init>= <expr><name><name>response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></init></decl>,
            <decl><type ref="prev"/><name>res_col</name> <init>= <expr><name><name>response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*QString report = idb.checkAndReturnError();
        if(report != "") { std::cout &lt;&lt; "IDB ERROR IN SYNTAX MAPPING: " &lt;&lt; report.toUtf8().constData() &lt;&lt; std::endl; }*/</comment>

        <comment type="line">//THIS CAN CHANGE IN THE FUTURE</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>gaze_key</name> <init>= <expr><name>project_path</name> <operator>+</operator> <literal type="string">"L"</literal> <operator>+</operator> <name><name>response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="string">"C"</literal> <operator>+</operator> <name><name>response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>cached_gazes</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>updateGazeWithSyntacticInfo</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name><name>cached_gazes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr></argument>,<argument><expr><call><name><name>cached_gazes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QDomElement</name></expr></argument>&gt;</argument_list></name></type> <name>element_list</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>srcml_element</name> <range>: <expr><name>elements</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>srcml_element</name><operator>.</operator><name>tagName</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"unit"</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>element_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>srcml_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>element_start_line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>element_start_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>element_end_line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>element_end_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>QDomAttr</name></type> <name>start</name> <init>= <expr><call><name><name>srcml_element</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"pos:start"</literal></expr></argument>)</argument_list></call></expr></init></decl>,
                     <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>srcml_element</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"pos:end"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//Get pos elements from scrml tag</comment>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>start</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>end</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><call><name><name>start</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>start</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"INVALID_POS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>element_start_line</name> <operator>=</operator> <call><name><name>start</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>element_start_col</name> <operator>=</operator> <call><name><name>start</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if<condition>(<expr><call><name><name>end</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>end</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"INVALID_POS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>element_end_line</name> <operator>=</operator> <call><name><name>end</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>element_end_col</name> <operator>=</operator> <call><name><name>end</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content> <continue>continue;</continue> </block_content>}</block></else></if_stmt> <comment type="line">// element doesn't have position info</comment>

            <comment type="line">// Check for bugs in srcml</comment>
            <if_stmt><if>if<condition>(<expr><name>element_end_line</name> <operator>&lt;</operator> <name>element_start_line</name> <operator>||</operator> <name>element_end_line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>element_start_line</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
            <comment type="line">// No more tags can encompass the token</comment>
            <if_stmt><if>if<condition>(<expr><name>element_start_line</name> <operator>&gt;</operator> <name>res_line</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
            <comment type="line">// No tags on this line can encompass token</comment>
            <if_stmt><if>if<condition>(<expr><name>res_line</name> <operator>==</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>element_start_col</name> <operator>&gt;</operator> <name>res_col</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
            <comment type="line">// Skip this tag since it can't encompass token</comment>
            <if_stmt><if>if<condition>(<expr><name>res_line</name> <operator>&gt;</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>res_line</name> <operator>&gt;</operator> <name>element_end_line</name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
            <comment type="line">// In between multiple lines</comment>
            <if_stmt><if>if<condition>(<expr><name>res_line</name> <operator>&gt;=</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>res_line</name> <operator>&lt;</operator> <name>element_end_line</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>element_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>srcml_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>res_line</name> <operator>&gt;=</operator> <name>element_start_line</name> <operator>&amp;&amp;</operator> <name>res_line</name> <operator>==</operator> <name>element_end_line</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>res_col</name> <operator>&lt;=</operator> <name>element_end_col</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name><name>element_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>srcml_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  </block_content>}</block></if>
                <else>else <block>{<block_content> <continue>continue;</continue> </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>QString</name></type> <name>syntactic_context</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>xpath</name> <init>= <expr><literal type="string">"/"</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>element</name> <range>: <expr><name>element_list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>element</name><operator>.</operator><name>namespaceURI</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>xpath</name> <operator>+=</operator> <literal type="string">"/src:"</literal><operator>+</operator><call><name><name>element</name><operator>.</operator><name>tagName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>xpath</name> <operator>+=</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>element</name><operator>.</operator><name>tagName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if<condition>(<expr><call><name><name>element</name><operator>.</operator><name>tagName</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"unit"</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>xpath</name> <operator>+=</operator> <literal type="string">"[@filename=\""</literal> <operator>+</operator> <call><name><name>element</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>value</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\"]"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>QDomAttr</name></type> <name>start</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"pos:start"</literal></expr></argument>)</argument_list></call></expr></init></decl>,
                     <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>attributeNode</name></name><argument_list>(<argument><expr><literal type="string">"pos:end"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>start</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>end</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>xpath</name> <operator>+=</operator> <literal type="string">"[@pos:start=\""</literal><operator>+</operator><call><name><name>start</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\" and "</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>xpath</name> <operator>+=</operator> <literal type="string">"@pos:end=\""</literal><operator>+</operator><call><name><name>end</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\"]"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>syntactic_context</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>syntactic_context</name> <operator>+=</operator> <literal type="string">"-&gt;"</literal><operator>+</operator><call><name><name>element</name><operator>.</operator><name>tagName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>syntactic_context</name> <operator>=</operator> <call><name><name>element</name><operator>.</operator><name>tagName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>cached_gazes</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>xpath</name></expr></argument>,<argument><expr><name>syntactic_context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>updateGazeWithSyntacticInfo</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>xpath</name></expr></argument>,<argument><expr><name>syntactic_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SRCMLMapper</name><operator>::</operator><name>mapToken</name></name><parameter_list>(<parameter><decl><type><name>SRCMLHandler</name><modifier>&amp;</modifier></type> <name>srcml</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>unit_path</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>project_path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>valid_sessions</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr><call><name><name>idb</name><operator>.</operator><name>getGazesForSourceMapping</name></name><argument_list>(<argument><expr><name>project_path</name></expr></argument>,<argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*QString report = idb.checkAndReturnError();
    if(report != "") { std::cout &lt;&lt; "IDB ERROR IN TOKEN MAPPING TOP: " &lt;&lt; report.toUtf8().constData() &lt;&lt; std::endl; }*/</comment>

    <decl_stmt><decl><type><name>QStringList</name></type> <name>unit_body</name> <init>= <expr><call><name><name>srcml</name><operator>.</operator><name>getUnitBody</name></name><argument_list>(<argument><expr><name>unit_path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//std::cout &lt;&lt; "UNIT BODY SIZE: " &lt;&lt; unit_body.size() &lt;&lt; std::endl;;</comment>
    <comment type="line">//for(auto i : unit_body) { std::cout &lt;&lt; i.toUtf8().constData() &lt;&lt; std::endl; }</comment>

    <comment type="line">// Check if any of the values are 0 - if they are, the data is 0-indexed and doesn't need to be shifted.</comment>
    <comment type="line">// This is NOT an exhaustive check, plugins should by default be 1-indexed. This is only a small check.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>one_indexed</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>response</name> <range>: <expr><name>responses</name></expr></range></decl></init>)</control> <block>{<block_content>
        <comment type="line">//if(valid_sessions.contains(response[1])) { continue; }</comment>
        <if_stmt><if>if<condition>(<expr><name><name>response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>one_indexed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//QString big_query = "";</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>,<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>cached_gazes</name></decl>;</decl_stmt>
    <comment type="line">//std::cout &lt;&lt; "RESPONSES SIZE TOKEN: " &lt;&lt; responses.size() &lt;&lt; std::endl;</comment>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>response</name> <range>: <expr><name>responses</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>valid_sessions</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res_line</name> <init>= <expr><name><name>response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></init></decl>,
            <decl><type ref="prev"/><name>res_col</name> <init>= <expr><name><name>response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>one_indexed</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>--</operator><name>res_line</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>res_col</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>token</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>token_type</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/*QString report = idb.checkAndReturnError();
        if(report != "") { std::cout &lt;&lt; "IDB ERROR IN TOKEN MAPPING BOTTOM: " &lt;&lt; report.toUtf8().constData() &lt;&lt; std::endl; }*/</comment>

        <decl_stmt><decl><type><name>QString</name></type> <name>gaze_key</name> <init>= <expr><name>project_path</name><operator>+</operator><literal type="string">"L"</literal><operator>+</operator><name><name>response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="string">"C"</literal><operator>+</operator><name><name>response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>cached_gazes</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>updateGazeWithTokenInfo</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name><name>cached_gazes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr></argument>,<argument><expr><call><name><name>cached_gazes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// If line_num &gt; number of line in body</comment>
        <comment type="line">// Invalid, assume it is whitespace</comment>
        <comment type="line">// OR</comment>
        <comment type="line">// If the col position is outside the bounds of the line</comment>
        <comment type="line">// Invalid, assume it is whitespace</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>res_line</name> <operator>&lt;</operator> <call><name><name>unit_body</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>res_col</name> <operator>&lt;</operator> <name><name>unit_body</name><index>[<expr><name>res_line</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>token</name> <operator>=</operator> <literal type="string">"WHITESPACE"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cached_gazes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>,<argument><expr><name>token_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>updateGazeWithTokenInfo</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>token</name></expr></argument>,<argument><expr><name>token_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setLineTextToken</name><argument_list>(<argument><expr><name><name>unit_body</name><index>[<expr><name>res_line</name></expr>]</index></name></expr></argument>,<argument><expr><name>res_col</name></expr></argument>,<argument><expr><name><name>response</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name>token</name></expr></argument>,<argument><expr><name>token_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cached_gazes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>gaze_key</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>,<argument><expr><name>token_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>idb</name><operator>.</operator><name>updateGazeWithTokenInfo</name></name><argument_list>(<argument><expr><name><name>response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>token</name></expr></argument>,<argument><expr><name>token_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/srcmlmapper.h" hash="d2ce2764dbed2257ec14a32cb77721f171ec5356"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file srcmlmapper.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SRCMLMAPPER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRCMLMAPPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDomDocument&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srcmlhandler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>SRCMLMapper</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>SRCMLMapper</name><argument_list>(<argument><expr><name>Database</name><operator>&amp;</operator> <name>db</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>idb</name><argument_list>(<argument>db</argument>)</argument_list></macro> <block>{}</block></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>mapSyntax</name><parameter_list>(<parameter><decl><type><name>SRCMLHandler</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>QString</name></type></decl></parameter>, <parameter><decl><type><name>QString</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>mapToken</name><parameter_list>(<parameter><decl><type><name>SRCMLHandler</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>QString</name></type></decl></parameter>, <parameter><decl><type><name>QString</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type></decl></parameter>)</parameter_list>;</function_decl>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>Database</name><modifier>&amp;</modifier></type> <name>idb</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SRCMLMAPPER_H</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="iTrace-Toolkit/xmlhandler.cpp" hash="1bdf7792c1e90a6dc05a8a3292dad89767a13328"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file xmlhandler.cpp
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmlhandler.h"</cpp:file></cpp:include>

<constructor><name><name>XMLHandler</name><operator>::</operator><name>XMLHandler</name></name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>xml</name> <operator>=</operator> <operator>new</operator> <call><name>QXmlStreamReader</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></constructor>

<constructor><name><name>XMLHandler</name><operator>::</operator><name>XMLHandler</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>fileURL</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>file_path</name> <operator>=</operator> <name>fileURL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file_path</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"file:///"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>setFileName</name></name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Open the file to get the raw data</comment>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QFile</name><operator>::</operator><name>ReadOnly</name></name> <operator>|</operator> <name><name>QFile</name><operator>::</operator><name>Text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* Error will go here */</comment> </block_content>}</block></if></if_stmt> <comment type="line">// Need to open the file as readonly and text</comment>

    <expr_stmt><expr><name>xml</name> <operator>=</operator> <operator>new</operator> <call><name>QXmlStreamReader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>XMLHandler</name><operator>::</operator><name>~XMLHandler</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>xml</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>XMLHandler</name><operator>::</operator><name>addString</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>xml_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xml</name><operator>-&gt;</operator><name>addData</name></name><argument_list>(<argument><expr><name>xml_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>XMLHandler</name><operator>::</operator><name>checkAndReturnError</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>xml</name><operator>-&gt;</operator><name>hasError</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>xml</name><operator>-&gt;</operator><name>errorString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// NOTE: Calling this will reset the stream to the beginning</comment>
<function><type><name>QString</name></type> <name><name>XMLHandler</name><operator>::</operator><name>getXMLFileType</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xml</name><operator>-&gt;</operator><name>readNextStartElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>rtn</name> <init>= <expr><call><name><name>xml</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//resetStream();</comment>
    <return>return <expr><name>rtn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>XMLHandler</name><operator>::</operator><name>getNextElementName</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//while(!xml-&gt;readNextStartElement()) {}</comment>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><call><name><name>xml</name><operator>-&gt;</operator><name>readNext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name><name>QXmlStreamReader</name><operator>::</operator><name>StartElement</name></name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name><name>QXmlStreamReader</name><operator>::</operator><name>Invalid</name></name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><call><name><name>xml</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>XMLHandler</name><operator>::</operator><name>getElementAttribute</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>xml</name><operator>-&gt;</operator><name>attributes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>value</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>XMLHandler</name><operator>::</operator><name>getNextElementAsString</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <while>while<condition>(<expr><operator>!</operator><call><name>isAtEnd</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><call><name><name>xml</name><operator>-&gt;</operator><name>readNext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name><name>QXmlStreamReader</name><operator>::</operator><name>StartElement</name></name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name><name>QXmlStreamReader</name><operator>::</operator><name>Invalid</name></name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>QString</name></type> <name>name</name> <init>= <expr><call><name><name>xml</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>rtn</name> <init>= <expr><literal type="string">"&lt;"</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" "</literal></expr></init></decl>;</decl_stmt>



    <for>for<control>(<init><decl><type><name>auto</name></type> <name>attr</name> <range>: <expr><call><name><name>xml</name><operator>-&gt;</operator><name>attributes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>rtn</name> <operator>+=</operator> <call><name><name>attr</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"=\""</literal> <operator>+</operator> <call><name><name>attr</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\" "</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>xml</name><operator>-&gt;</operator><name>readNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>text</name> <init>= <expr><call><name><name>xml</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trimmed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rtn</name> <operator>+=</operator> <literal type="string">"&gt;"</literal> <operator>+</operator> <name>text</name> <operator>+</operator> <literal type="string">"&lt;/"</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <return>return <expr><name>rtn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>XMLHandler</name><operator>::</operator><name>resetStream</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xml</name><operator>-&gt;</operator><name>setDevice</name></name><argument_list>(<argument><expr><call><name><name>xml</name><operator>-&gt;</operator><name>device</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>XMLHandler</name><operator>::</operator><name>isAtEnd</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>xml</name><operator>-&gt;</operator><name>atEnd</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="iTrace-Toolkit/xmlhandler.h" hash="ac9417ccdb94d17f73a0196f1c7c431b33ced37b"><comment type="block" format="doxygen">/********************************************************************************************************************************************************
* @file xmlhandler.h
*
* @Copyright (C) 2022 i-trace.org
*
* This file is part of iTrace Infrastructure http://www.i-trace.org/.
* iTrace Infrastructure is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* iTrace Infrastructure is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with iTrace Infrastructure. If not, see &lt;https://www.gnu.org/licenses/&gt;.
********************************************************************************************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XMLHANDLER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLHANDLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QXmlStreamReader&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QXmlStreamAttributes&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFile&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>class</name></type> <name>XMLHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>XMLHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XMLHandler</name><argument_list>(<argument><expr><name>QString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>XMLHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>void</name></type> <name>addString</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>checkAndReturnError</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>getXMLFileType</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getNextElementName</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getElementAttribute</name><parameter_list>(<parameter><decl><type><name>QString</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>getNextElementAsString</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>resetStream</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isAtEnd</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>QString</name></type> <name>getFilePath</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>file_path</name></expr>;</return> </block_content>}</block></function>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>QString</name></type> <name>file_path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QXmlStreamReader</name><modifier>*</modifier></type> <name>xml</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// XMLHANDLER_H</comment>
</unit>

</unit>
